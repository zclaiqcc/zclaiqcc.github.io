<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于团队管理的一些思考、学习和汇总</title>
      <link href="/2019/09/16/%E5%85%B3%E4%BA%8E%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E3%80%81%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B1%87%E6%80%BB/"/>
      <url>/2019/09/16/%E5%85%B3%E4%BA%8E%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E3%80%81%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>做团队管理半年以来的一些<code>极其粗浅</code>的思考整理，<code>几乎不具有</code>参考和借鉴意义，也<code>很有可能不适合</code>被拿来套用，完全的个人风格使然。换句话说，就像家里买了辆小三轮车，要用粉笔在后门两侧写上大大的“自”“用”，才不会被人误会成街上拉客的三蹦子。</p><p>最开始主要是通过看一些公众号文章快速地获得一些“术”，稍加思考和调整，就拿来用了，典型的“拿来主义”，这种方法在早期见效是比较快的，但是不及时结合团队实际情况进行调整的话，也很快就容易跑偏或者陷入极度的自我狂欢。往后还看了一些书，有的是之前一直都有听说但是也没什么兴趣看的“团队管理”、“自我管理”类的书，企业类的书，你知道的，很容易就变得“教条主义”或者“鸡汤主义”，单靠自己发现，从里面找到几本好书是不太容易的，所以又跟老板和其他同事沟通拿到了其他的一些，这些不能保证都是确凿无疑的好书，但是至少不是确凿无疑烂书，也算是一种偷懒的途径吧。这里根据回忆大概列举一些还不错的：</p><ul><li>最早通过文章学习到的“术”，基本都整理在这里了：<a href="/doodod/RD-handbook.html">RD-handbook - zclaiqcc</a></li><li>《奈飞文化手册》：侧重企业文化的书</li><li>《别让猴子跳回背上》：早期的管理者基本都是相对比较厉害的技术人员晋升的，很容易就会觉得下属工作效率比较低，万事都要上手去做，这本书虽然不太算是语言精炼的好书，但是快速读完如果能改变一点关于任务分工的认知，也算是比较有收获吧</li><li>《格鲁夫给经理人的第一课》：算是比较经典的管理类书，偏实践类</li><li>《彼得原理》：职级晋升的能力陷进，单一观点了解类的书</li><li>《卓有成效的管理者》：也是格鲁夫的书，讲时间和决策</li></ul><h2 id="所有问题的核心都是人力成本和时间成本"><a href="#所有问题的核心都是人力成本和时间成本" class="headerlink" title="所有问题的核心都是人力成本和时间成本"></a>所有问题的核心都是人力成本和时间成本</h2><blockquote><p>这是自己瞎想的</p></blockquote><p>就像每件事都有一个或几个核心，我觉得团队管理的所有问题的核心都可以等效转化成<code>人力成本和时间成本</code>的问题，最典型的排期，在确定的时间用确定的人力做完某些事；优先级，人力确定的情况下，时间上优先完成哪些事；攻克技术难点，少数高级技术人员或者多数低级技术人员花一定的时间解决某个问题；解决 BUG，突然插队的高优先级需求；综上，如何在有限的时间和有限的人力资源的情况下，或者用更少的人力和更少的时间，完成更多的事，是团队管理的核心</p><h2 id="自我身份定位：辅助"><a href="#自我身份定位：辅助" class="headerlink" title="自我身份定位：辅助"></a>自我身份定位：辅助</h2><p>从最开始就把自己定义为团队的支持者，或者叫<code>辅助</code>。</p><p>一方面原因是最开始自己管理经验不足，为了少犯错，所以需要做一个辅助，支持大家按照自己最舒服的方式去做事，在这个过程中去发现一些可以调整的部分，逐渐转向一个“温和的独裁者”，另一方面是这样能让大家最快地接受你，尤其是从团队提拔的管理者需要同事的认知转变，需要得到之前同级的同事的配合和支持，这种方式不会让他们有太多的抵触心理。</p><p>反对的声音：管理者就是要做一个管理者，下级服从上级是理所应当，在大家都是成年人的团队中，大概率不会出现不服从，而且如果真的出现了这种情况，需要用更强硬的手段去清除这些成员。</p><h2 id="仪式感"><a href="#仪式感" class="headerlink" title="仪式感"></a>仪式感</h2><blockquote><p>What makes a team a team.</p></blockquote><h3 id="开会"><a href="#开会" class="headerlink" title="开会"></a>开会</h3><p>在一起<code>开会</code>是成为一个团队最重要也最容易的一种仪式。团队成立之初，第一要做的就是把大家的心态进行调整，重新明确各自的分工，从之前的角色上转变出来，组成一个新的团队。在每个关键节点开会能让大家快速地达到共同认知，构建整个团队的想象共同体。</p><h3 id="目标和利益绑定"><a href="#目标和利益绑定" class="headerlink" title="目标和利益绑定"></a>目标和利益绑定</h3><p>另一种仪式感是<code>目标和利益绑定</code>，团队一定要有自己区别于其他团队的独立的目标，一般每个团队之间的分工上会有比较大的差异（除了某些为了内部竞争而建立的团队），比如“产品团队”，“运营团队”，“技术团队”，“职能团队”，在分工比较明确的情况，拥有自己独特的目标就成了大家认同自己的团队身份的最大的区别感。与目标对应的，团队的利益一定是绑定的，如果一个团队成员犯错，对外，一定是整个团队都受到惩罚，而不是孤立地选定某一个责任人，对内，可以内部复盘，客观分析原因和提出解决方案。团队内部可以再分更小的团队，但是一定要重新明确目标和利益。</p><h3 id="强参与"><a href="#强参与" class="headerlink" title="强参与"></a>强参与</h3><p>在拆分出小团队之前，建议管理者参与每一次和成员相关的会议，之后可以适当跳出。</p><h3 id="内部分享"><a href="#内部分享" class="headerlink" title="内部分享"></a>内部分享</h3><p><code>团队内部分享</code>（技术/非技术）也是获得团队认同的一种方式。</p><h2 id="外部团队的定位"><a href="#外部团队的定位" class="headerlink" title="外部团队的定位"></a>外部团队的定位</h2><p>这个相对比较明确，对外部团队来说，管理者就是团队的物化代表（或者叫团队法人）。所有对于团队内部的沟通，对外都是屏蔽看不到的，一定经过该团队的管理者，好的和不好的，都需要过滤；所有团队对外的输出，也都是由管理者来完成的，团队成员的表现和奖惩都是通过管理者对外输出而获得的。</p><h2 id="自身能力"><a href="#自身能力" class="headerlink" title="自身能力"></a>自身能力</h2><blockquote><p>自身能力一定要超过团队的大多数成员，尤其是在早期</p></blockquote><p>这里只是想实名反对一下所谓的“职业经理人”，没有相关技术背景的管理者很难获得团队成员的认可，导致团队成员不服，任务很难推动下去。另一个更重要的原因：拥有相关技术背景并且能给出准确“预估”是管理者一项非常非常重要的技能，会让团队成员觉得管理者很靠谱，而不是天马行空（“我不管我就是要做这个”）。</p><p>反对的声音：管理者就是要做一个管理者，通过制度的方式而不是成员任何去推动事情的完成。</p><h2 id="管理能力"><a href="#管理能力" class="headerlink" title="管理能力"></a>管理能力</h2><blockquote><p>去一线发现问题</p></blockquote><p>放了一个看起来和管理能力最不相关的能力。但是是我觉得（早期）管理者管理能力提升最直接的途径，（后期）也是管理者精进的必须，不解释。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>管理者的日常工作里面，有很大一部分都是去把控团队的工作流，这里的工作流不只是抽象的工作的输入和输出，需要具体到每一个团队成员的工作内容本身。并且管理者需要亲自跳到工作流里面，感受成员的工作日常，切身体会现有工作流的优点和缺点，同时定期复盘获取团队的反馈，以及时调整工作流，进行优化，获得管理能力和认知水平的提升。</p><h2 id="缺点与不足"><a href="#缺点与不足" class="headerlink" title="缺点与不足"></a>缺点与不足</h2><p>主动为团队争取资源</p><p>了解每一个成员的具体工作情况，以进行相对公正的评价，做出对应的激励和惩罚</p><p>培养副官，或者说每个岗位都需要一个 backup</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> team, thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Note</title>
      <link href="/2019/08/24/redis-note/"/>
      <url>/2019/08/24/redis-note/</url>
      
        <content type="html"><![CDATA[<p><strong><em>Redis means <code>REmote DIctionary Server</code></em></strong></p><h2 id="Redis-Pipelining"><a href="#Redis-Pipelining" class="headerlink" title="Redis Pipelining"></a>Redis Pipelining</h2><p>save the <code>RTT(Round Trip Time)</code>, but it’s better to send less than a batch of 10k commands because the RTT will be much a small part of the whole time though the memory occupied will be much bigger.</p><h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><h2 id="Memory-optimization"><a href="#Memory-optimization" class="headerlink" title="Memory optimization"></a>Memory optimization</h2><p>Use hashes when possible.</p><p>But <code>the Redis Way</code> is that the user must understand how things work so that he is able to pick the best compromise, and to understand how the system will behave exactly.</p><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p><code>MULTI</code>/<code>EXEC</code>/<code>Discarding</code>/<code>WATCH</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">&gt; INCR foo</span><br><span class="line">QUEUED</span><br><span class="line">&gt; INCR bar</span><br><span class="line">QUEUED</span><br><span class="line">&gt; EXEC</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 1</span><br></pre></td></tr></table></figure><ul><li>other commands never execute during a Redis transaction.</li><li>all the commands will be executed util <code>EXEC</code> is called.</li></ul><h3 id="Redis-does-not-support-roll-backs"><a href="#Redis-does-not-support-roll-backs" class="headerlink" title="Redis does not support roll backs"></a>Redis does not support roll backs</h3><ul><li>rarely fail but called with a wrong syntax. This kind of error that is very likely to be detected during development, and not in production.</li><li>simplified and faster</li></ul><h2 id="Redis-Mass-Insertion"><a href="#Redis-Mass-Insertion" class="headerlink" title="Redis Mass Insertion"></a>Redis Mass Insertion</h2><h3 id="Use-the-protocol-Luke"><a href="#Use-the-protocol-Luke" class="headerlink" title="Use the protocol, Luke"></a>Use the protocol, Luke</h3><p><code>redis-cli --pipe</code>, in <code>Redis Protocol specification</code></p><h2 id="Partitioning"><a href="#Partitioning" class="headerlink" title="Partitioning"></a>Partitioning</h2><h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><ul><li>larger <code>databases</code></li><li>multiple <code>cores</code> and <code>computers</code> and <code>network bandwidth</code> and so on.</li></ul><h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h3><ul><li><code>range partitioning</code>: need extra storage</li><li><code>hash partitioning</code>: may be not that scalable</li></ul><h3 id="Different-implementations-of-partitioning"><a href="#Different-implementations-of-partitioning" class="headerlink" title="Different implementations of partitioning"></a>Different implementations of partitioning</h3><ul><li><code>Client side partitioning</code>: the <code>client implementations</code> decides which redis-server to select to read or write</li><li><code>Proxy assisted partitioning</code>: the client sends requests to a <code>proxy</code>. The proxy will make sure to forward our request to the right Redis instance accordingly to the configured partitioning schema, and will send the replies back to the client. </li><li><code>Query routing</code>: <code>Redis Cluster</code> implements an hybrid form of query routing.</li></ul><h3 id="Disadvantages-of-partitioning"><a href="#Disadvantages-of-partitioning" class="headerlink" title="Disadvantages of partitioning"></a>Disadvantages of partitioning</h3><ul><li>Operations involving <code>multiple keys</code> are usually not supported</li><li><code>Redis transactions involving multiple keys</code> can not be used</li><li>The partitioning <code>granularity</code> is the <code>key</code>, so it is not possible to shard a dataset with a single huge key like a very big sorted set.</li><li><code>data handling</code> is more complex</li><li>Adding and removing <code>capacity</code> can be complex</li></ul><h3 id="Presharding"><a href="#Presharding" class="headerlink" title="Presharding"></a>Presharding</h3><p>Using Redis replication you will likely be able to do the move with minimal or no downtime for your users:</p><ol><li>Start empty instances in your new server.</li><li>Move data configuring these new instances as slaves for your source instances.</li><li>Stop your clients.</li><li>Update the configuration of the moved instances with the new server IP address.</li><li>Send the SLAVEOF NO ONE command to the slaves in the new server.</li><li>Restart your clients with the new updated configuration.</li><li>Finally shut down the no longer used instances in the old server.</li></ol><h3 id="Implementations-of-Redis-partitioning"><a href="#Implementations-of-Redis-partitioning" class="headerlink" title="Implementations of Redis partitioning"></a>Implementations of Redis partitioning</h3><ul><li>Redis Cluster: <code>query routing</code> and <code>client side partitioning</code></li><li>Twemproxy: Twemproxy is a proxy developed at Twitter</li><li>Clients supporting consistent hashing</li></ul><h2 id="Secondary-indexing"><a href="#Secondary-indexing" class="headerlink" title="Secondary indexing"></a>Secondary indexing</h2><h2 id="Redis-data-types-and-abstractions"><a href="#Redis-data-types-and-abstractions" class="headerlink" title="Redis data types and abstractions"></a>Redis data types and abstractions</h2><ul><li>Binary-safe strings</li><li>Lists: basically <code>linked lists</code></li><li>Sets</li><li>Sorted sets</li><li>Hashes</li><li>Bit arrays (or simply bitmaps)</li><li>HyperLogLogs</li><li>Streams: append-only collections of map-like entries that provide an abstract log data type</li></ul><h3 id="Redis-Keys"><a href="#Redis-Keys" class="headerlink" title="Redis Keys"></a>Redis Keys</h3><ul><li>Very long keys are not a good idea: for several costly key-comparisons</li><li>Very short keys are often not a good idea: more readable</li><li><code>object-type:id</code> is a good idea</li></ul><h3 id="Redis-Strings"><a href="#Redis-Strings" class="headerlink" title="Redis Strings"></a>Redis Strings</h3><ul><li><code>SET</code>/<code>GET</code></li><li><code>MSET</code>/<code>MGET</code></li><li><code>INCR</code>/<code>DECR</code>/<code>INCRBY</code>/<code>DECRBY</code>: parses the string value as an integer, increments it by one. Atomic.</li><li><code>GETSET</code>: sets a key to a new value, returning the old value as the result.</li><li><code>EXISTS</code>/<code>DEL</code>/<code>TYPE</code></li><li><code>EXPIRE</code>/<code>PEXPIRE</code></li></ul><h3 id="Redis-Lists"><a href="#Redis-Lists" class="headerlink" title="Redis Lists"></a>Redis Lists</h3><p>Redis lists are implemented via <code>Linked Lists</code>, that means adding a new element is performed in constant time.</p><ul><li><code>LPUSH</code>/<code>RPUSH</code></li><li><code>LRANGE</code></li><li><code>RPOP</code>/<code>LPOP</code></li><li><code>LTRIM</code>/<code>RTRIM</code></li><li><code>BRPOP</code>/<code>BLPOP</code></li><li><code>RPOPLPUSH</code>/<code>BRPOPLPUSH</code></li></ul><h3 id="Redis-Hashes"><a href="#Redis-Hashes" class="headerlink" title="Redis Hashes"></a>Redis Hashes</h3><ul><li><code>HGET</code>/<code>HSET</code>/<code>HMGET</code>/<code>HMSET</code></li><li><code>HINCRBY</code>/<code>HDECRBY</code></li></ul><h3 id="Redis-Sets"><a href="#Redis-Sets" class="headerlink" title="Redis Sets"></a>Redis Sets</h3><ul><li><code>SADD</code>/<code>SMEMBERS</code></li><li><code>SISMEMER</code></li><li><code>SINTER</code></li><li><code>SPOP</code></li><li><code>SUNIONSTORE</code></li><li><code>SCARD</code></li></ul><h3 id="Redis-Sorted-sets"><a href="#Redis-Sorted-sets" class="headerlink" title="Redis Sorted sets"></a>Redis Sorted sets</h3><ul><li><code>ZADD</code></li><li><code>ZRANGE</code>/<code>ZREVRANGE</code></li><li><code>ZRANGEBYSCORE</code></li><li><code>ZREMRANGEBYSCORE</code></li><li><code>ZRANK</code>/<code>ZREVRANK</code></li></ul><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><ul><li><code>SETBIT</code>/<code>GETBIT</code></li><li><code>BITOP</code></li><li><code>BITCOUNT</code></li><li><code>BITPOS</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tornado Async Note</title>
      <link href="/2019/08/24/tornado-async-note/"/>
      <url>/2019/08/24/tornado-async-note/</url>
      
        <content type="html"><![CDATA[<h2 id="C10K"><a href="#C10K" class="headerlink" title="C10K"></a>C10K</h2><p>10k times of connections at the same time will cause a rapid decreasement of performance of server machine.</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Step-1-select"><a href="#Step-1-select" class="headerlink" title="Step 1: select"></a>Step 1: select</h3><ol><li>添加需要监控的文件句柄（file description, fd）到 fd_set</li><li>调用 <code>select()</code> 将 fd_set 从用户空间拷贝到内核空间</li><li>注册一个回调函数</li><li>内核对 fd 进行监控</li><li>当满足读/写/超时等条件时调用回调函数并将 fd_set 拷贝回用户空间</li><li>轮询查找所有的 fd</li><li>当再次有新连接需要监控的时候，重复步骤 1</li></ol><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/docs-resources/tornado-async/select.jpg" alt="select.jpg"></p><p><strong>weakness</strong></p><ol><li>fd 上限：fd 越多处理效率越低，32 位机默认是 1024</li><li>重复初始化：每次都全量地把 fd_set 在用户空间和内核空间来回拷贝</li><li>逐个轮询 fd 效率不高：大部分 fd 都是不可操作的（没有状态更新）</li></ol><h3 id="Step-2-poll"><a href="#Step-2-poll" class="headerlink" title="Step 2: poll"></a>Step 2: poll</h3><p>解决了 fd 上限的问题，用链表存储 fd_set</p><h3 id="Step-3-epoll"><a href="#Step-3-epoll" class="headerlink" title="Step 3: epoll"></a>Step 3: epoll</h3><ol><li>epoll 提供了 <code>epoll_ctl</code> 函数，用 <code>epoll_ctl</code> 函数进行注册的时候，会将 fd 复制到内核中，不用每次都复制一遍，有新的 fd 时也采用增量拷贝，确保每个 fd 只会被拷贝一次</li><li><code>epoll_ctl</code> 函数为每个 fd 注册一个回调函数，同时会在内核汇总通过 <code>epoll_create</code> 创建一个专用链表（还有包含存储 fd 的专用空间），当有 fd 状态发生变更，通过回调函数会将状态发送改变的 fd 加入到该专用链表，<code>epoll_wait</code> 函数负责查看专用链表中有没有就绪的 fd，然后只将就绪的 fd 从内核空间拷贝到用户空间<ul><li>epoll_create：用于创建和初始化一些内部使用的数据结构</li><li>epoll_crl： 用于注册时间、添加、删除和修改指定的df及其期待的事件</li><li>epoll_wait: 用于等待先前指定的fd事件，即就绪的fd</li></ul></li></ol><h2 id="Tornado-Web-Server-Asynchronous"><a href="#Tornado-Web-Server-Asynchronous" class="headerlink" title="Tornado Web Server Asynchronous"></a>Tornado Web Server Asynchronous</h2><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/docs-resources/tornado-async/tornado-flow.jpg" alt="tornado-flow.jpg"></p><ol><li>tornado 会首先建立一个 socket 监听，如果客户端 A 请求建立连接之后，tornado 会基于原先的 socket 新创建一个包含客户端 A 连接有关信息的 socket（分配新的监听端口），原先的 socket 继续监听原来的端口等待建立新的 socket 连接；tornado 把所有的 socket（其实还是文件句柄，fd）都扔给 epoll 去监控；这部分是 tornado web server 负责处理</li><li><code>Torando.ioloop.IOLoop.current().start()</code> 开启循环，不断询问 epoll 是否有请求需要处理，这就是 <code>ioloop</code> 所做的工作，也是 tornado 的核心部分；这部分是由 tornado ioloop 负责处理</li><li>第一步和第二步是各自独立运行的；当有客户进行请求，epoll 就发现有 socket 可处理，ioloop 再次询问 epoll 时，epoll 就把需要处理的 socket（fd）交给 tornado 处理；最后的处理是由 web app 处理（业务逻辑代码）</li></ol><p>上面的流程“初步”解决了 C10k 的问题，说“初步”是因为只解决了让客户端的请求进来的问题，但是没有解决处理过程中的阻塞问题，比如 tornado 拿到了 20 个请求需要处理，第一个非常耗时，后面的请求都还是会排队等待，所以需要让 tornado 的处理过程也“异步”起来</p><h2 id="Tornado-Web-Server-Starting-Details"><a href="#Tornado-Web-Server-Starting-Details" class="headerlink" title="Tornado Web Server Starting Details"></a>Tornado Web Server Starting Details</h2><p><strong>启动的流程有一些分支，这里不贴全部的代码，只将从零启动一个 server 的所有初始化流程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    <span class="comment"># 可以研究一下 Configurable 抽象类是如果定义一个 factory</span></span><br><span class="line">    server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    <span class="comment"># bind 方法初始化了一个 sockets 对象，但是还并没有调用 `self.add_sockets(sockets)` 添加到 sockets 列表中</span></span><br><span class="line">    <span class="comment"># 而是放到了 `self._pending_sockets` 这个 list 中</span></span><br><span class="line">    server.bind(<span class="number">8888</span>)</span><br><span class="line">    <span class="comment"># 把 `self._pending_sockets` 中预设的 sockets 加载到 server runtime，真正开始 accepting connections</span></span><br><span class="line">    server.start()</span><br><span class="line">    <span class="comment"># app.listen(8888)</span></span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcpserver.py</span></span><br><span class="line"><span class="comment"># 很多方法都默认写到了 TCPserver，HTTPServer 只是 TCPServer 的子类，大多共用同样的方法，除了 `handle_stream` 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="comment"># `server.start()` 会调用 `self.add_sockets(sockets)` 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_sockets</span><span class="params">(self, sockets: Iterable[socket.socket])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""Makes this server start accepting connections on the given sockets.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The ``sockets`` parameter is a list of socket objects such as</span></span><br><span class="line"><span class="string">        those returned by `~tornado.netutil.bind_sockets`.</span></span><br><span class="line"><span class="string">        `add_sockets` is typically used in combination with that</span></span><br><span class="line"><span class="string">        method and `tornado.process.fork_processes` to provide greater</span></span><br><span class="line"><span class="string">        control over the initialization of a multi-process server.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实际运行的时候发现这里的 sockets 默认是创建了两个，`AddressFamily.AF_INET` 和 `AddressFamily.AF_INET6`, IPv4 和 IPv6</span></span><br><span class="line">        <span class="keyword">for</span> sock <span class="keyword">in</span> sockets:</span><br><span class="line">        <span class="comment"># `self._sockets` 和 `self._handlers` 只在 `self.stop` 的时候做了一次遍历，把每个注册的 sockets pop 和 close 掉</span></span><br><span class="line">        <span class="comment"># 重点是这里的 `add_accept_handler(sock, self._handle_connection)` 函数（netutil.py）和 `self._handle_connection` 函数（回调函数）</span></span><br><span class="line">            self._sockets[sock.fileno()] = sock</span><br><span class="line">            <span class="comment"># 不贴工具类 `netutil.add_accept_handler` 的具体代码了</span></span><br><span class="line">            <span class="comment"># 作用是往当前的 ioloop 里面添加一个回调函数是 `self._handle_connection` 的 socket</span></span><br><span class="line">            <span class="comment"># 比较有意思的设计是这里的返回值，这里返回一个函数 `remove_handle`，可以让调用方获得一个可以 revert 当前操作的能力</span></span><br><span class="line">            <span class="comment"># 还有一个细节 `set_close_exec`，是通知调用方执行完毕后 close 掉本次执行</span></span><br><span class="line">            <span class="comment"># IOLoop.READ 是 epoll module 里面的一种 events 类型，具体可查阅 epoll module  </span></span><br><span class="line">            self._handlers[sock.fileno()] = add_accept_handler(</span><br><span class="line">                sock, self._handle_connection</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回调函数，启动 HTTPServer 注册的 socket 收到连接请求的时候会调用</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_handle_connection</span><span class="params">(self, connection: socket.socket, address: Any)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        [ ... ]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化了一个 `iostream`，文档中对这个类的描述是 `Socket-based `IOStream` implementation`</span></span><br><span class="line">        <span class="comment"># 对 socket 进行异步封装的 IO 数据流处理类</span></span><br><span class="line">        <span class="comment"># 后面有一段基于 IOStream 类封装的 socket 请求 www.baidu.com 的 Demo</span></span><br><span class="line">            <span class="keyword">if</span> self.ssl_options <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                stream = SSLIOStream(</span><br><span class="line">                    connection,</span><br><span class="line">                    max_buffer_size=self.max_buffer_size,</span><br><span class="line">                    read_chunk_size=self.read_chunk_size,</span><br><span class="line">                )  <span class="comment"># type: IOStream</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stream = IOStream(</span><br><span class="line">                    connection,</span><br><span class="line">                    max_buffer_size=self.max_buffer_size,</span><br><span class="line">                    read_chunk_size=self.read_chunk_size,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 重点是这里的 `self.handle_stream`</span></span><br><span class="line">            <span class="comment"># 把新接受到的 socket 放到 IOStream 中</span></span><br><span class="line">            future = self.handle_stream(stream, address)</span><br><span class="line">            <span class="keyword">if</span> future <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># `gen.convert_yielded(future)` 只是为了把 Python 的 Future 转换成 tornado 自己定义的 Future 类（concurrent.py）</span></span><br><span class="line">                IOLoop.current().add_future(</span><br><span class="line">                    gen.convert_yielded(future), <span class="keyword">lambda</span> f: f.result()</span><br><span class="line">                )</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            app_log.error(<span class="string">"Error in connection callback"</span>, exc_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># httpserver.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPServer</span><span class="params">(TCPServer, Configurable, httputil.HTTPServerConnectionDelegate)</span>:</span></span><br><span class="line"><span class="string">"""A non-blocking, single-threaded HTTP server.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_stream</span><span class="params">(self, stream: iostream.IOStream, address: Tuple)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        context = _HTTPRequestContext(</span><br><span class="line">            stream, address, self.protocol, self.trusted_downstream</span><br><span class="line">        )</span><br><span class="line">        conn = HTTP1ServerConnection(stream, self.conn_params, context)</span><br><span class="line">        self._connections.add(conn)</span><br><span class="line">        conn.start_serving(self)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于 IOStream 类封装的 socket 请求 www.baidu.com 的 Demo</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> tornado.iostream</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</span><br><span class="line">    stream = tornado.iostream.IOStream(s)</span><br><span class="line">    <span class="keyword">await</span> stream.connect((<span class="string">"www.baidu.com"</span>, <span class="number">80</span>))</span><br><span class="line">    <span class="keyword">await</span> stream.write(<span class="string">b"GET / HTTP/1.0\r\nHost: baidu.com\r\n\r\n"</span>)</span><br><span class="line">    header_data = <span class="keyword">await</span> stream.read_until(<span class="string">b"\r\n\r\n"</span>)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> header_data.split(<span class="string">b"\r\n"</span>):</span><br><span class="line">        parts = line.split(<span class="string">b":"</span>)</span><br><span class="line">        <span class="keyword">if</span> len(parts) == <span class="number">2</span>:</span><br><span class="line">            headers[parts[<span class="number">0</span>].strip()] = parts[<span class="number">1</span>].strip()</span><br><span class="line">    body_data = <span class="keyword">await</span> stream.read_bytes(int(headers[<span class="string">b"Content-Length"</span>]))</span><br><span class="line">    print(body_data)</span><br><span class="line">    stream.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tornado.ioloop.IOLoop.current().run_sync(main)</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</span><br><span class="line">    stream = tornado.iostream.IOStream(s)</span><br><span class="line">    stream.connect((<span class="string">"www.baidu.com"</span>, <span class="number">80</span>), <span class="string">"send_request or something you want to send to the server"</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><h2 id="Tornado-Web-Application-Asynchronous-or-Python-Async"><a href="#Tornado-Web-Application-Asynchronous-or-Python-Async" class="headerlink" title="Tornado Web Application Asynchronous or Python Async"></a>Tornado Web Application Asynchronous or Python Async</h2><p>看一下 <strong>tornado.ioloop.IOLoop.current().start()</strong> 后面都执行了什么，这里强烈推荐执行一个 <code>hello world</code> 代码，一步一步跟踪进去看都执行了哪一步以及属性值都是多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tornado.ioloop.IOLoop.current().run_sync(main)</span><br></pre></td></tr></table></figure><p><code>ioloop.py</code> 的 <code>class IOLoop(Configurable)</code> 是基类，Tornado 6.0.3 的 ioloop 直接使用了 Python 的 <code>asyncio</code>，并用 <code>asyncio.BaseAsyncIOLoop</code> 进行封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># asyncio.py</span></span><br><span class="line"><span class="comment"># 这里把 IOLoop 基类的方法也放到 BaseAsyncIOLoop 里面，方便阅读</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseAsyncIOLoop</span><span class="params">(IOLoop)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 fd 加入到 events 中等待响应</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_handler</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        self, fd: Union[int, _Selectable], handler: Callable[..., None], events: int</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        fd, fileobj = self.split_fd(fd)</span><br><span class="line">        <span class="keyword">if</span> fd <span class="keyword">in</span> self.handlers:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"fd %s added twice"</span> % fd)</span><br><span class="line">        self.handlers[fd] = (fileobj, handler)</span><br><span class="line">        <span class="keyword">if</span> events &amp; IOLoop.READ:</span><br><span class="line">            self.asyncio_loop.add_reader(fd, self._handle_events, fd, IOLoop.READ)</span><br><span class="line">            self.readers.add(fd)</span><br><span class="line">        <span class="keyword">if</span> events &amp; IOLoop.WRITE:</span><br><span class="line">            self.asyncio_loop.add_writer(fd, self._handle_events, fd, IOLoop.WRITE)</span><br><span class="line">            self.writers.add(fd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取唯一一个 `event_loop`，并执行 run_forever</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            old_loop = asyncio.get_event_loop()</span><br><span class="line">        <span class="keyword">except</span> (RuntimeError, AssertionError):</span><br><span class="line">            old_loop = <span class="literal">None</span>  <span class="comment"># type: ignore</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._setup_logging()</span><br><span class="line">            asyncio.set_event_loop(self.asyncio_loop)</span><br><span class="line">            self.asyncio_loop.run_forever()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            asyncio.set_event_loop(old_loop)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下一个 IOLoop 迭代就执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, callback: Callable, *args: Any, **kwargs: Any)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">"""Calls the given callback on the next I/O loop iteration.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        <span class="keyword">if</span> get_ident() == self._thread_identity:</span><br><span class="line">            call_soon = self.asyncio_loop.call_soon</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            call_soon = self.asyncio_loop.call_soon_threadsafe</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            call_soon(self._run_callback, functools.partial(callback, *args, **kwargs))</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="comment"># "Event loop is closed". Swallow the exception for</span></span><br><span class="line">            <span class="comment"># consistency with PollIOLoop (and logical consistency</span></span><br><span class="line">            <span class="comment"># with the fact that we can't guarantee that an</span></span><br><span class="line">            <span class="comment"># add_callback that completes without error will</span></span><br><span class="line">            <span class="comment"># eventually execute).</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># IOLoop 基类方法</span></span><br><span class="line">    <span class="comment"># Future finished 的时候才会执行 callback</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_future</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        self,</span></span></span><br><span class="line"><span class="function"><span class="params">        future: <span class="string">"Union[Future[_T], concurrent.futures.Future[_T]]"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        callback: Callable[[<span class="string">"Future[_T]"</span>], None],</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""Schedules a callback on the ``IOLoop`` when the given</span></span><br><span class="line"><span class="string">        `.Future` is finished.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The callback is invoked with one argument, the</span></span><br><span class="line"><span class="string">        `.Future`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This method only accepts `.Future` objects and not other</span></span><br><span class="line"><span class="string">        awaitables (unlike most of Tornado where the two are</span></span><br><span class="line"><span class="string">        interchangeable).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(future, Future):</span><br><span class="line">            <span class="comment"># Note that we specifically do not want the inline behavior of</span></span><br><span class="line">            <span class="comment"># tornado.concurrent.future_add_done_callback. We always want</span></span><br><span class="line">            <span class="comment"># this callback scheduled on the next IOLoop iteration (which</span></span><br><span class="line">            <span class="comment"># asyncio.Future always does).</span></span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            <span class="comment"># Wrap the callback in self._run_callback so we control</span></span><br><span class="line">            <span class="comment"># the error logging (i.e. it goes to tornado.log.app_log</span></span><br><span class="line">            <span class="comment"># instead of asyncio's log).</span></span><br><span class="line">            future.add_done_callback(</span><br><span class="line">                <span class="keyword">lambda</span> f: self._run_callback(functools.partial(callback, future))</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> is_future(future)</span><br><span class="line">            <span class="comment"># For concurrent futures, we use self.add_callback, so</span></span><br><span class="line">            <span class="comment"># it's fine if future_add_done_callback inlines that call.</span></span><br><span class="line">            future_add_done_callback(</span><br><span class="line">                future, <span class="keyword">lambda</span> f: self.add_callback(callback, future)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IOLoop 基类方法</span></span><br><span class="line">    <span class="comment"># 立即运行 callback，并且如果 callback 的结果是一个 Future，再通过 add_future 加入到后续执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_callback</span><span class="params">(self, callback: Callable[[], Any])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""Runs a callback with error handling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .. versionchanged:: 6.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           CancelledErrors are no longer logged.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = callback()</span><br><span class="line">            <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">from</span> tornado <span class="keyword">import</span> gen</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Functions that return Futures typically swallow all</span></span><br><span class="line">                <span class="comment"># exceptions and store them in the Future.  If a Future</span></span><br><span class="line">                <span class="comment"># makes it out to the IOLoop, ensure its exception (if any)</span></span><br><span class="line">                <span class="comment"># gets logged too.</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ret = gen.convert_yielded(ret)</span><br><span class="line">                <span class="keyword">except</span> gen.BadYieldError:</span><br><span class="line">                    <span class="comment"># It's not unusual for add_callback to be used with</span></span><br><span class="line">                    <span class="comment"># methods returning a non-None and non-yieldable</span></span><br><span class="line">                    <span class="comment"># result, which should just be ignored.</span></span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.add_future(ret, self._discard_future_result)</span><br><span class="line">        <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            app_log.error(<span class="string">"Exception in callback %r"</span>, callback, exc_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><ul><li><a href="https://www.jiqizhixin.com/articles/2019-04-10-15">Tornado原理浅析及应用场景探讨 - 额外概述了 select/poll/epoll</a></li><li><a href="https://www.cnblogs.com/yiwenshengmei/archive/2011/06/08/understanding_tornado.html">深入理解Tornado——一个异步web服务器 - 好像是贴了旧版本（6.0 以前）的 Torando.ioloop.IOLoop.current().start() 的代码，可以理解一下原理</a></li><li><a href="https://www.rapospectre.com/blog/34">深入理解 tornado 之 底层 ioloop 实现 - 也贴了 iolopp 之前封装 epoll 的代码，最新的直接用 asyncio</a></li><li><a href="https://www.youtube.com/watch?v=1coLC-MUCJc">Tulip: Async I/O for Python 3 - Guido Van Rossum</a></li><li><a href="https://segmentfault.com/a/1190000004373224#articleHeader2">浅析tornado协程运行原理 - 思路很好，不过有点复杂了，其实直接断点追一下 <code>run_sync</code> 执行 print(‘hello world’) 就可以看到效果</a></li><li><a href="http://xidui.github.io/2015/10/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3python3-4-Asyncio%E5%BA%93%E4%B8%8ENode-js%E7%9A%84%E5%BC%82%E6%AD%A5IO%E6%9C%BA%E5%88%B6/">深入理解python3.4中Asyncio库与Node.js的异步IO机制 - 比较硬核，自己尝试写了一个 <code>asyncio.run_forever</code></a></li></ul><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>写完这篇笔记，一步一步调试模式下跟着 IOLoop 处理异步以及 Tornado 接收网络请求（TCPServer/HTTPServer）之后，昨天晚上回家随手翻了一下 《UNIX 网络编程》，发现这两天看的基本都在书里面，也讲了 I/O 复用，之前学的时候就记得一个 server 一个 client 来回打印消息内容，<code>sigh，还是要多读书多看报</code></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tornado, python, async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tornado Note</title>
      <link href="/2019/08/13/tornado-note/"/>
      <url>/2019/08/13/tornado-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote><p>Tornado is a Python web framework and asynchronous networking library</p></blockquote><h3 id="4-Major-Components"><a href="#4-Major-Components" class="headerlink" title="4 Major Components"></a>4 Major Components</h3><ul><li>A web framework: <code>RequestHandler</code> and various supporting classes</li><li>Client- and server-side implementions of HTTP: <code>HTTPServer</code> and <code>AsyncHTTPClient</code></li><li>An asynchronous networking library: <code>IOLoop</code> and <code>IOStream</code></li><li>A coroutine library: <code>tornado.gen</code>. But after Python3.5, <code>async def</code> is recommended.</li></ul><h2 id="Asynchronous-and-non-Blocking-I-O"><a href="#Asynchronous-and-non-Blocking-I-O" class="headerlink" title="Asynchronous and non-Blocking I/O"></a>Asynchronous and non-Blocking I/O</h2><h3 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h3><blockquote><p>In fact, every function blocks, at least a little bit, while it is running and using the CPU</p></blockquote><h3 id="Asynchronous"><a href="#Asynchronous" class="headerlink" title="Asynchronous"></a>Asynchronous</h3><blockquote><p>An asynchronous function returns before it is finished, and generally causes some work to happen in the background before triggering some future action in the application</p></blockquote><ul><li>Callback argument</li><li>Return a placeholder (<code>Future</code>, <code>Promise</code>, <code>Deferred</code>)</li><li>Deliver to a queue</li><li>Callback registry (e.g. POSIX signals)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.concurrent <span class="keyword">import</span> Future</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_fetch_manual</span><span class="params">(url)</span>:</span></span><br><span class="line">    http_client = AsyncHTTPClient()</span><br><span class="line">    my_future = Future()</span><br><span class="line">    fetch_future = http_client.fetch(url)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_fetch</span><span class="params">(f)</span>:</span></span><br><span class="line">        my_future.set_result(f.result().body)</span><br><span class="line">    fetch_future.add_done_callback(on_fetch)</span><br><span class="line">    <span class="keyword">return</span> my_future</span><br></pre></td></tr></table></figure><h2 id="Coroutines"><a href="#Coroutines" class="headerlink" title="Coroutines"></a>Coroutines</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simplified inner loop of tornado.gen.Runner</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># send(x) makes the current yield return x.</span></span><br><span class="line">    <span class="comment"># It returns when the next yield is reached</span></span><br><span class="line">    future = self.gen.send(self.next)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(f)</span>:</span></span><br><span class="line">        self.next = f.result()</span><br><span class="line">        self.run()</span><br><span class="line">    future.add_done_callback(callback)</span><br></pre></td></tr></table></figure><h2 id="Tornado-web-application"><a href="#Tornado-web-application" class="headerlink" title="Tornado web application"></a>Tornado web application</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">"Hello, world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><h3 id="The-Application-object"><a href="#The-Application-object" class="headerlink" title="The Application object"></a>The <code>Application</code> object</h3><h3 id="Subclassing-RequestHandler"><a href="#Subclassing-RequestHandler" class="headerlink" title="Subclassing RequestHandler"></a>Subclassing <code>RequestHandler</code></h3><h3 id="Handling-request-input"><a href="#Handling-request-input" class="headerlink" title="Handling request input"></a>Handling request input</h3><ul><li>get_argument</li><li>get_arguments</li><li>get_body_argument</li><li>get_body_arguments</li></ul><h3 id="Overriding-RequestHandler-methods"><a href="#Overriding-RequestHandler-methods" class="headerlink" title="Overriding RequestHandler methods"></a>Overriding RequestHandler methods</h3><p><code>prepare</code>, <code>get</code>, <code>post</code>, <code>initialize</code>, <code>on_finish</code>, <code>on_connection_close</code>, <code>set_default_headers</code></p><h3 id="Asynchronous-handlers"><a href="#Asynchronous-handlers" class="headerlink" title="Asynchronous handlers"></a>Asynchronous handlers</h3><p>override <code>get</code>/<code>post</code>/etc to make the handler asynchronous</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        http = tornado.httpclient.AsyncHTTPClient()</span><br><span class="line">        response = <span class="keyword">await</span> http.fetch(<span class="string">"http://friendfeed-api.com/v2/feed/bret"</span>)</span><br><span class="line">        json = tornado.escape.json_decode(response.body)</span><br><span class="line">        self.write(<span class="string">"Fetched "</span> + str(len(json[<span class="string">"entries"</span>])) + <span class="string">" entries "</span></span><br><span class="line">                   <span class="string">"from the FriendFeed API"</span>)</span><br></pre></td></tr></table></figure><h2 id="Running-and-deploying"><a href="#Running-and-deploying" class="headerlink" title="Running and deploying"></a>Running and deploying</h2><blockquote><p>Due to the Python GIL (Global Interpreter Lock), it is necessary to run multiple Python processes to take full advantage of multi-CPU machines. Typically it is best to run one process per CPU.</p></blockquote><h3 id="Running-behind-a-load-balancer"><a href="#Running-behind-a-load-balancer" class="headerlink" title="Running behind a load balancer"></a>Running behind a load balancer</h3><h2 id="Web-framework"><a href="#Web-framework" class="headerlink" title="Web framework"></a>Web framework</h2><h3 id="tornado-web-—-RequestHandler-and-Application-classes"><a href="#tornado-web-—-RequestHandler-and-Application-classes" class="headerlink" title="tornado.web — RequestHandler and Application classes"></a><code>tornado.web</code> — <code>RequestHandler</code> and <code>Application</code> classes</h3><h3 id="tornado-routing-—-Basic-routing-implementation"><a href="#tornado-routing-—-Basic-routing-implementation" class="headerlink" title="tornado.routing — Basic routing implementation"></a><code>tornado.routing</code> — Basic routing implementation</h3><h3 id="tornado-websocket-—-Bidirectional-communication-to-the-browser"><a href="#tornado-websocket-—-Bidirectional-communication-to-the-browser" class="headerlink" title="tornado.websocket — Bidirectional communication to the browser"></a><code>tornado.websocket</code> — Bidirectional communication to the browser</h3><h2 id="HTTP-servers-and-clients"><a href="#HTTP-servers-and-clients" class="headerlink" title="HTTP servers and clients"></a>HTTP servers and clients</h2><h3 id="tornado-httpserver-—-Non-blocking-HTTP-server"><a href="#tornado-httpserver-—-Non-blocking-HTTP-server" class="headerlink" title="tornado.httpserver — Non-blocking HTTP server"></a><code>tornado.httpserver</code> — Non-blocking HTTP server</h3><h3 id="tornado-httpclient-—-Asynchronous-HTTP-client"><a href="#tornado-httpclient-—-Asynchronous-HTTP-client" class="headerlink" title="tornado.httpclient — Asynchronous HTTP client"></a><code>tornado.httpclient</code> — Asynchronous HTTP client</h3><h2 id="Asynchronous-networking"><a href="#Asynchronous-networking" class="headerlink" title="Asynchronous networking"></a>Asynchronous networking</h2><h3 id="tornado-ioloop-—-Main-event-loop"><a href="#tornado-ioloop-—-Main-event-loop" class="headerlink" title="tornado.ioloop — Main event loop"></a><code>tornado.ioloop</code> — Main event loop</h3>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tornado, python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Tutorial (Saloon Script)</title>
      <link href="/2019/08/07/how-to-use-git-elegantly/"/>
      <url>/2019/08/07/how-to-use-git-elegantly/</url>
      
        <content type="html"><![CDATA[<p><strong><em>How To Use Git Elegantly &amp; Why Is Git So Elegant.</em></strong></p><h2 id="Git-基本概念"><a href="#Git-基本概念" class="headerlink" title="Git 基本概念"></a>Git 基本概念</h2><h3 id="集中式-amp-分布式"><a href="#集中式-amp-分布式" class="headerlink" title="集中式 &amp; 分布式"></a>集中式 &amp; 分布式</h3><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库</p><h3 id="工作区-working-directory-amp-暂存区-stage-index-amp-版本库-repo"><a href="#工作区-working-directory-amp-暂存区-stage-index-amp-版本库-repo" class="headerlink" title="工作区 working directory &amp; 暂存区 stage/index &amp; 版本库 repo"></a>工作区 working directory &amp; 暂存区 stage/index &amp; 版本库 repo</h3><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/git.jpg" width='513' height='162' /><h3 id="追踪修改-而不是文件"><a href="#追踪修改-而不是文件" class="headerlink" title="追踪修改 而不是文件"></a>追踪修改 而不是文件</h3><h2 id="Git-常用操作"><a href="#Git-常用操作" class="headerlink" title="Git 常用操作"></a>Git 常用操作</h2><h3 id="git-–help"><a href="#git-–help" class="headerlink" title="git  –help"></a>git <command> –help</h3><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>创建版本库</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>查看当前状态</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><h3 id="git-commit-m"><a href="#git-commit-m" class="headerlink" title="git commit -m"></a>git commit -m</h3><figure class="highlight plain"><figcaption><span>before you commit ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### git diff</span><br><span class="line"></span><br><span class="line">查看修改信息</span><br><span class="line">&gt; Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, changes between two blob objects, or changes between two files on disk.</span><br><span class="line"></span><br><span class="line">### git log</span><br><span class="line"></span><br><span class="line">### git blame</span><br><span class="line"></span><br><span class="line">git blame -L 200,+10 api_v2&#x2F;android_api.py</span><br><span class="line"></span><br><span class="line">### git show &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">### git alias</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;git</span><br><span class="line">git log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</span><br><span class="line"></span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/git-reset.png" alt="git-reset.png"></p><h3 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h3><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p>fast-forward 模式和 normal 模式</p><p>–no-ff</p><p>git reset –hard <commit>/HEAD^/HEAD~100</p><h2 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p>git submodule init<br>git submodule update –remote</p><h2 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h2><h3 id="Feature-Bug-切分支处理"><a href="#Feature-Bug-切分支处理" class="headerlink" title="Feature Bug 切分支处理"></a>Feature Bug 切分支处理</h3><p>git stash<br>git checkout -b feature-code/issue-number</p><h3 id="commit-message-规范"><a href="#commit-message-规范" class="headerlink" title="commit message 规范"></a>commit message 规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>简短描述，不超过 50 个字符</p><h2 id="附录一：-Demo"><a href="#附录一：-Demo" class="headerlink" title="附录一： Demo"></a>附录一： Demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find .git&#x2F;objects&#x2F; -type f</span><br><span class="line">echo &#39;version 1&#39; &gt; test.txt</span><br><span class="line">git hash-object test.txt</span><br><span class="line">git cat-file -p xxxxx</span><br><span class="line"></span><br><span class="line">git update-index</span><br><span class="line">git write-tree</span><br><span class="line">git read-tree</span><br><span class="line">git commit-tree</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://git-scm.com/book/zh/v2">Pro Git book</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">commit message</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">git教程 - 廖雪峰</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/git-cheatsheet.pdf">git-cheatsheet.pdf</a></li><li><a href="https://cjting.me/2017/05/13/how-git-generate-diff/">Git 是怎样生成 diff 的：Myers 算法</a></li><li><a href="https://www.youtube.com/watch?v=4XpnKHJAok8">Tech Talk: Linus Torvalds on git</a></li></ul><h1 id="Think-before-you-commit"><a href="#Think-before-you-commit" class="headerlink" title="Think before you commit"></a>Think before you commit</h1>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn More Programming Languages (Note)</title>
      <link href="/2019/08/06/learn-more-programming-languages/"/>
      <url>/2019/08/06/learn-more-programming-languages/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="https://thorstenball.com/blog/2019/04/09/learn-more-programming-languages/">Learn more programming languages, even if you won’t use them</a></p><ol><li>各有擅长和不擅长的场景，多一种工具，开箱即用</li><li>每个语言的编写思路都不太一样，塑造编程的想法，即使永远没开过箱</li><li>模式是有限的，掌握更多编程语言能提高你学其他语言的效率，同理掌握其他技术也是一样的</li></ol><blockquote><p>Take SQL, for example, and how it shapes your thoughts about the flow and the form of data in your program. Now consider what that would look like in an imperative, object-oriented language like Java, or a functional language like Haskell. Or in C. Imagine what a multi-player game server looks like in Python, in Haskell, in Erlang; streaming and processing terabytes of data in C, in Go, in Clojure; a user interface in Tcl, in Lua, in JavaScript.<br>如果你曾经用 Erlang 写过游戏服务器，你就会用一种不同的视角看待游戏服务器；在你用 LISP 处理数据之后，你就能把数据看作，可以通过一些小函数组成的函数管道处理的，一些 lists；如果你真的下手尝试用 C 进行内存管理，你就会更感激 Python、Ruby 和 Go 为你做的一切；如果你用 React.js 和 JavaScript 构建过 UI 页面，就能用以一种基础（底层）的方式理解页面组件切换</p></blockquote><hr><p>推荐：</p><ul><li>Java/JavaScript: 不会的最好都先看一下吧，使用范围太广了，有兴趣也可以搞一下 C/C++</li><li>Python/Go/PHP: 三选二吧，可以搞一下 Go，（曾经 Python/PHP 都只能叫脚本语言hhh）</li><li>Scala/Haskell/Erlang/LISP/R: 随便一门函数式编程语言</li></ul>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quantum Computing (Saloon Script)</title>
      <link href="/2019/07/24/quantum-computing/"/>
      <url>/2019/07/24/quantum-computing/</url>
      
        <content type="html"><![CDATA[<p><strong>一句话核心</strong></p><p>classic bit: 0 or 1<br>qubit: 0 and 1</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="NOT-AND-OR-logic-gate"><a href="#NOT-AND-OR-logic-gate" class="headerlink" title="NOT AND OR logic gate"></a>NOT AND OR logic gate</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/1_not_and_or.png" alt="1_not_and_or"></p><h3 id="XOR-logic-gate"><a href="#XOR-logic-gate" class="headerlink" title="XOR logic gate"></a>XOR logic gate</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/2_xor.png" alt="2_xor"></p><h3 id="adder"><a href="#adder" class="headerlink" title="adder"></a>adder</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/3_half_adder.png" alt="3_half_adder"></p><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/4_full_adder.png" alt="4_full_adder"></p><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/5_many_full_adders.png" alt="5_many_full_adders"></p><h3 id="Superposition"><a href="#Superposition" class="headerlink" title="Superposition"></a>Superposition</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/6_superposition.png" alt="6_superposition"></p><h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/7_compare.png" alt="7_compare"></p><video id="video" controls="" preload="none" poster="">  <source id="mp4" src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/8_compare_video.mp4" type="video/mp4"></video><!-- ![8_compare_video](https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/8_compare_video.mp4) --><h2 id="RSA-公钥选取："><a href="#RSA-公钥选取：" class="headerlink" title="RSA 公钥选取："></a>RSA 公钥选取：</h2><p>经典计算机：600,000 年 | exponential<br>量子计算机：4 h | polynomial</p><h2 id="目前的量子“经典”算法"><a href="#目前的量子“经典”算法" class="headerlink" title="目前的量子“经典”算法"></a>目前的量子“经典”算法</h2><ul><li>Shor Algorithm<br><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/Doodod/qubit/shor_algorithm.jpg" alt="shor_algorithm"></li><li>Grover Algorithm</li><li>量子退火</li></ul><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><ul><li><a href="https://xw.qq.com/amphtml/20180115G07FNR">量子计算–Shor算法 - 腾讯网</a></li><li><a href="https://www.bilibili.com/video/av33951287">【墨子沙龙】姚期智——量子计算科学 - bilibili</a></li><li><a href="https://www.zhihu.com/question/26933442">如何用 IT 业者能听懂的话介绍量子计算的原理？ - 逼乎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quantum-computing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Note</title>
      <link href="/2019/04/16/nginx-note/"/>
      <url>/2019/04/16/nginx-note/</url>
      
        <content type="html"><![CDATA[<p><a href="http://nginx.org/en/docs/">http://nginx.org/en/docs/ – RTFM</a></p><p><strong><em>some concepts and super link to how-tos</em></strong></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">http://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p><h2 id="Controll"><a href="#Controll" class="headerlink" title="Controll"></a>Controll</h2><p>User <code>nginx -h</code> for help</p><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/nginx-help.jpg" alt="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/nginx-help.jpg"></p><p>BTW:</p><ul><li>nginx -t: test configuration and exit</li><li>nginx -s: send signal to a master process: stop, quit, reopen, reload</li></ul><h2 id="Load-Balance"><a href="#Load-Balance" class="headerlink" title="Load Balance"></a>Load Balance</h2><blockquote><ul><li>round-robin — requests to the application servers are distributed in a round-robin fashion. Use <code>weight</code> to enpower the greater server.</li><li>least-connected — next request is assigned to the server with the least number of active connections</li><li>ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address)</li></ul></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.0.0.1</span> backup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>server weight</code> </li><li><code>server slow-start</code></li></ul><h2 id="Configuration-File"><a href="#Configuration-File" class="headerlink" title="Configuration File"></a>Configuration File</h2><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">directive    &lt;param&gt;;</span><br><span class="line">directive <span class="meta">[&lt;group_name&gt;]</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Contexts"><a href="#Contexts" class="headerlink" title="Contexts"></a>Contexts</h3><blockquote><ul><li>events – General connection processing</li><li>http – HTTP traffic</li><li>mail – Mail traffic</li><li>stream – TCP and UDP traffic<br>Directives placed outside of these contexts are said to be in the <code>main</code> context.</li></ul></blockquote><h3 id="Virtual-Servers"><a href="#Virtual-Servers" class="headerlink" title="Virtual Servers"></a>Virtual Servers</h3><figure class="highlight plain"><figcaption><span>``` context defines ``` virtual servers ``` that control the processing of requests</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; For HTTP traffic (the http context), each server directive controls the processing of requests for resources at particular domains or IP addresses. One or more location contexts in a server context define how to process specific sets of URIs.</span><br><span class="line">&gt; For mail and TCP&#x2F;UDP traffic (the mail and stream contexts) the server directives each control the processing of traffic arriving at a particular TCP port or UNIX socket.</span><br><span class="line"></span><br><span class="line">### Samples</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;config</span><br><span class="line">user nobody; # a directive in the &#39;main&#39; context</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    # configuration of connection processing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # Configuration specific to HTTP and affecting all virtual servers  </span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        # configuration of HTTP virtual server 1       </span><br><span class="line">        location &#x2F;one &#123;</span><br><span class="line">            # configuration for processing URIs starting with &#39;&#x2F;one&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        location &#x2F;two &#123;</span><br><span class="line">            # configuration for processing URIs starting with &#39;&#x2F;two&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        # configuration of HTTP virtual server 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    # Configuration specific to TCP&#x2F;UDP and affecting all virtual servers</span><br><span class="line">    server &#123;</span><br><span class="line">        # configuration of TCP virtual server 1 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ul><li>The process ID of the master process is written to the file <code>/usr/local/nginx/logs/nginx.pid</code> by default. Or or in <code>nginx.conf</code> using the <code>pid</code> directive</li><li>[Server Names - how Nginx match server names configured](<a href="http://nginx.org/en/docs/http/sWebSocket">http://nginx.org/en/docs/http/sWebSocket</a> proxyingerver_names.html)</li><li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html">Configuring HTTPS servers</a></li><li><a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Changelog Sample</title>
      <link href="/2019/03/29/CHANGELOG_SAMPLE/"/>
      <url>/2019/03/29/CHANGELOG_SAMPLE/</url>
      
        <content type="html"><![CDATA[<p>All notable changes to this project will be documented in this file.</p><p>The format is based on <a href="https://keepachangelog.com/en/1.0.0/">Keep a Changelog</a>,<br>and this project adheres to <a href="https://semver.org/spec/v2.0.0.html">Semantic Versioning</a>.</p><h2 id="Unreleased"><a href="#Unreleased" class="headerlink" title="Unreleased"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v1.0.0...HEAD">Unreleased</a></h2><h3 id="Changed"><a href="#Changed" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Update and improvement of Polish translation from <a href="https://github.com/m-aciek">@m-aciek</a>.</li></ul><h2 id="1-0-0-2017-06-20"><a href="#1-0-0-2017-06-20" class="headerlink" title="1.0.0 - 2017-06-20"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.3.0...v1.0.0">1.0.0</a> - 2017-06-20</h2><h3 id="Added"><a href="#Added" class="headerlink" title="Added"></a>Added</h3><ul><li>New visual identity by <a href="https://github.com/tylerfortune8">@tylerfortune8</a>.</li><li>Version navigation.</li><li>Links to latest released version in previous versions.</li><li>“Why keep a changelog?” section.</li><li>“Who needs a changelog?” section.</li><li>“How do I make a changelog?” section.</li><li>“Frequently Asked Questions” section.</li><li>New “Guiding Principles” sub-section to “How do I make a changelog?”.</li><li>Simplified and Traditional Chinese translations from <a href="https://github.com/tianshuo">@tianshuo</a>.</li><li>German translation from <a href="https://github.com/mpbzh">@mpbzh</a> &amp; <a href="https://github.com/Art4">@Art4</a>.</li><li>Italian translation from <a href="https://github.com/azkidenz">@azkidenz</a>.</li><li>Swedish translation from <a href="https://github.com/magol">@magol</a>.</li><li>Turkish translation from <a href="https://github.com/karalamalar">@karalamalar</a>.</li><li>French translation from <a href="https://github.com/zapashcanon">@zapashcanon</a>.</li><li>Brazilian Portugese translation from <a href="https://github.com/Webysther">@Webysther</a>.</li><li>Polish translation from <a href="https://github.com/amielucha">@amielucha</a>.</li><li>Russian translation from <a href="https://github.com/aishek">@aishek</a>.</li><li>Czech translation from <a href="https://github.com/h4vry">@h4vry</a>.</li><li>Slovak translation from <a href="https://github.com/jkostolansky">@jkostolansky</a>.</li><li>Korean translation from <a href="https://github.com/pierceh89">@pierceh89</a>.</li><li>Croatian translation from <a href="https://github.com/porx">@porx</a>.</li></ul><h3 id="Changed-1"><a href="#Changed-1" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Start using “changelog” over “change log” since it’s the common usage.</li><li>Start versioning based on the current English version at 0.3.0 to help<br>translation authors keep things up-to-date.</li><li>Rewrite “What makes unicorns cry?” section.</li><li>Rewrite “Ignoring Deprecations” sub-section to clarify the ideal<br>scenario.</li><li>Improve “Commit log diffs” sub-section to further argument against<br>them.</li><li>Merge “Why can’t people just use a git log diff?” with “Commit log<br>diffs”</li><li>Fix typos in Simplified Chinese and Traditional Chinese translations.</li><li>Fix typos in Brazilian Portuguese translation.</li><li>Fix typos in Turkish translation.</li><li>Fix typos in Czech translation.</li><li>Fix typos in Swedish translation.</li><li>Improve phrasing in French translation.</li><li>Fix phrasing and spelling in German translation.</li></ul><h3 id="Removed"><a href="#Removed" class="headerlink" title="Removed"></a>Removed</h3><ul><li>Section about “changelog” vs “CHANGELOG”.</li></ul><h2 id="0-3-0-2015-12-03"><a href="#0-3-0-2015-12-03" class="headerlink" title="0.3.0 - 2015-12-03"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.2.0...v0.3.0">0.3.0</a> - 2015-12-03</h2><h3 id="Added-1"><a href="#Added-1" class="headerlink" title="Added"></a>Added</h3><ul><li>RU translation from <a href="https://github.com/aishek">@aishek</a>.</li><li>pt-BR translation from <a href="https://github.com/tallesl">@tallesl</a>.</li><li>es-ES translation from <a href="https://github.com/ZeliosAriex">@ZeliosAriex</a>.</li></ul><h2 id="0-2-0-2015-10-06"><a href="#0-2-0-2015-10-06" class="headerlink" title="0.2.0 - 2015-10-06"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.1.0...v0.2.0">0.2.0</a> - 2015-10-06</h2><h3 id="Changed-2"><a href="#Changed-2" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Remove exclusionary mentions of “open source” since this project can<br>benefit both “open” and “closed” source projects equally.</li></ul><h2 id="0-1-0-2015-10-06"><a href="#0-1-0-2015-10-06" class="headerlink" title="0.1.0 - 2015-10-06"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.8...v0.1.0">0.1.0</a> - 2015-10-06</h2><h3 id="Added-2"><a href="#Added-2" class="headerlink" title="Added"></a>Added</h3><ul><li>Answer “Should you ever rewrite a change log?”.</li></ul><h3 id="Changed-3"><a href="#Changed-3" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Improve argument against commit logs.</li><li>Start following <a href="https://semver.org">SemVer</a> properly.</li></ul><h2 id="0-0-8-2015-02-17"><a href="#0-0-8-2015-02-17" class="headerlink" title="0.0.8 - 2015-02-17"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.7...v0.0.8">0.0.8</a> - 2015-02-17</h2><h3 id="Changed-4"><a href="#Changed-4" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Update year to match in every README example.</li><li>Reluctantly stop making fun of Brits only, since most of the world<br>writes dates in a strange way.</li></ul><h3 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h3><ul><li>Fix typos in recent README changes.</li><li>Update outdated unreleased diff link.</li></ul><h2 id="0-0-7-2015-02-16"><a href="#0-0-7-2015-02-16" class="headerlink" title="0.0.7 - 2015-02-16"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.6...v0.0.7">0.0.7</a> - 2015-02-16</h2><h3 id="Added-3"><a href="#Added-3" class="headerlink" title="Added"></a>Added</h3><ul><li>Link, and make it obvious that date format is ISO 8601.</li></ul><h3 id="Changed-5"><a href="#Changed-5" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Clarified the section on “Is there a standard change log format?”.</li></ul><h3 id="Fixed-1"><a href="#Fixed-1" class="headerlink" title="Fixed"></a>Fixed</h3><ul><li>Fix Markdown links to tag comparison URL with footnote-style links.</li></ul><h2 id="0-0-6-2014-12-12"><a href="#0-0-6-2014-12-12" class="headerlink" title="0.0.6 - 2014-12-12"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.5...v0.0.6">0.0.6</a> - 2014-12-12</h2><h3 id="Added-4"><a href="#Added-4" class="headerlink" title="Added"></a>Added</h3><ul><li>README section on “yanked” releases.</li></ul><h2 id="0-0-5-2014-08-09"><a href="#0-0-5-2014-08-09" class="headerlink" title="0.0.5 - 2014-08-09"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.4...v0.0.5">0.0.5</a> - 2014-08-09</h2><h3 id="Added-5"><a href="#Added-5" class="headerlink" title="Added"></a>Added</h3><ul><li>Markdown links to version tags on release headings.</li><li>Unreleased section to gather unreleased changes and encourage note<br>keeping prior to releases.</li></ul><h2 id="0-0-4-2014-08-09"><a href="#0-0-4-2014-08-09" class="headerlink" title="0.0.4 - 2014-08-09"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.3...v0.0.4">0.0.4</a> - 2014-08-09</h2><h3 id="Added-6"><a href="#Added-6" class="headerlink" title="Added"></a>Added</h3><ul><li>Better explanation of the difference between the file (“CHANGELOG”)<br>and its function “the change log”.</li></ul><h3 id="Changed-6"><a href="#Changed-6" class="headerlink" title="Changed"></a>Changed</h3><ul><li>Refer to a “change log” instead of a “CHANGELOG” throughout the site<br>to differentiate between the file and the purpose of the file — the<br>logging of changes.</li></ul><h3 id="Removed-1"><a href="#Removed-1" class="headerlink" title="Removed"></a>Removed</h3><ul><li>Remove empty sections from CHANGELOG, they occupy too much space and<br>create too much noise in the file. People will have to assume that the<br>missing sections were intentionally left out because they contained no<br>notable changes.</li></ul><h2 id="0-0-3-2014-08-09"><a href="#0-0-3-2014-08-09" class="headerlink" title="0.0.3 - 2014-08-09"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.2...v0.0.3">0.0.3</a> - 2014-08-09</h2><h3 id="Added-7"><a href="#Added-7" class="headerlink" title="Added"></a>Added</h3><ul><li>“Why should I care?” section mentioning The Changelog podcast.</li></ul><h2 id="0-0-2-2014-07-10"><a href="#0-0-2-2014-07-10" class="headerlink" title="0.0.2 - 2014-07-10"></a><a href="https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.1...v0.0.2">0.0.2</a> - 2014-07-10</h2><h3 id="Added-8"><a href="#Added-8" class="headerlink" title="Added"></a>Added</h3><ul><li>Explanation of the recommended reverse chronological release ordering.</li></ul><h2 id="0-0-1-2014-05-31"><a href="#0-0-1-2014-05-31" class="headerlink" title="0.0.1 - 2014-05-31"></a>0.0.1 - 2014-05-31</h2><h3 id="Added-9"><a href="#Added-9" class="headerlink" title="Added"></a>Added</h3><ul><li>This CHANGELOG file to hopefully serve as an evolving example of a<br>standardized open source project CHANGELOG.</li><li>CNAME file to enable GitHub Pages custom domain</li><li>README now contains answers to common questions about CHANGELOGs</li><li>Good examples and basic guidelines, including proper date formatting.</li><li>Counter-examples: “What makes unicorns cry?”</li></ul>]]></content>
      
      
      <categories>
          
          <category> resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> changelog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Essentials</title>
      <link href="/2019/03/29/ES6%20Essentials/"/>
      <url>/2019/03/29/ES6%20Essentials/</url>
      
        <content type="html"><![CDATA[<p><strong><em>新语法并不代表一定是优化，而是提供了一种选择，每个新语法都有合适的场景，并不是旧语法一定要用新语法替换，个人认为，顺手就行，不过适当使用新特性，可以提高代码可读性和编码效率</em></strong></p><a id="more"></a><ul><li>refer: <a href="https://ponyfoo.com/books/practical-modern-javascript/chapters/2#es6-essentials">practical-modern-javascript/chapters/2#es6-essentials</a></li><li>further: <a href="http://es6-features.org/">http://es6-features.org/</a></li></ul><h2 id="对象字面量-Object-Literals"><a href="#对象字面量-Object-Literals" class="headerlink" title="对象字面量 Object Literals"></a>对象字面量 Object Literals</h2><p>鬼翻译，或者翻译成对象常量？就是正常的一个 Object</p><p>ES6 对 Object Literals 进行了一些改进，如下</p><h3 id="属性-值缩写-Property-Value-Shorthands"><a href="#属性-值缩写-Property-Value-Shorthands" class="headerlink" title="属性-值缩写 Property Value Shorthands"></a>属性-值缩写 Property Value Shorthands</h3><p>属性和值同名时可以使用缩写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> listeners = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> events = &#123;</span><br><span class="line">  listeners: listeners,</span><br><span class="line">  listen: listen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> listeners = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> events = &#123; listeners, listen &#125;</span><br></pre></td></tr></table></figure><h3 id="可计算的属性名-Computed-Property-Names"><a href="#可计算的属性名-Computed-Property-Names" class="headerlink" title="可计算的属性名 Computed Property Names"></a>可计算的属性名 Computed Property Names</h3><p>简单说就是不需要定义中间的 Object ，再对该 Object 单独赋予一些 属性-值（Property-Value）<br>尤其用于<code>函数传参</code>，函数内的 Object 可能和参数合并在一起来生成一个新的 Object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEnvelope</span>(<span class="params">type, description</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> envelope = &#123;</span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  envelope[type] = description</span><br><span class="line">  <span class="keyword">return</span> envelope</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEnvelope</span>(<span class="params">type, description</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    [type]: description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法定义-Method-Definitions"><a href="#方法定义-Method-Definitions" class="headerlink" title="方法定义 Method Definitions"></a>方法定义 Method Definitions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> emitter = &#123;</span><br><span class="line">  events: &#123;&#125;,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[type].push(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  emit: <span class="function"><span class="keyword">function</span> (<span class="params">type, event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[type].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">      fn(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> emitter = &#123;</span><br><span class="line">  events: &#123;&#125;,</span><br><span class="line">  on(type, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[type].push(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  emit(type, event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[type] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[type].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">      fn(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="箭头函数-Arrow-Functions"><a href="#箭头函数-Arrow-Functions" class="headerlink" title="箭头函数 Arrow Functions"></a>箭头函数 Arrow Functions</h2><p>定义匿名函数的新方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> example = <span class="function"><span class="keyword">function</span> (<span class="params">parameters</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> example = <span class="function">(<span class="params">parameters</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>不过需要注意，和传统的匿名函数定义方法不同的是，变量的作用域变了，详见下</strong></li></ul><h3 id="词法作用域-Lexical-Scoping"><a href="#词法作用域-Lexical-Scoping" class="headerlink" title="词法作用域 Lexical Scoping"></a>词法作用域 Lexical Scoping</h3><p>简单说，箭头函数函数体内的 <code>this</code>, <code>arguments</code>, <code>super</code> 指向被包含的作用域，也就是说 <strong>箭头函数不创建新的作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">puzzle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">puzzle(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 这里会打印 1, 2, 3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">puzzle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">puzzle(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 这里会打印 a, b, c</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数的多种口味-Arrow-Function-Flavors"><a href="#箭头函数的多种口味-Arrow-Function-Flavors" class="headerlink" title="箭头函数的多种口味 Arrow Function Flavors"></a>箭头函数的多种口味 Arrow Function Flavors</h3><p>鬼翻译，大概就是语法糖</p><p>只有一个参数以及简单的返回值时，可以去掉参数的小括号和函数体的大括号以及显式的 return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> double = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> double = <span class="function"><span class="params">value</span> =&gt;</span> value * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里文档没有说明，额外补充一点</span></span><br><span class="line"><span class="comment">// 当返回值是 Object 时候，需要用小括号包裹 Object，不然会发生什么？</span></span><br><span class="line"><span class="keyword">var</span> double1 = <span class="function"><span class="params">value</span> =&gt;</span> (&#123;<span class="attr">result</span>: value * <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="赋值解构-Assignment-Destructuring"><a href="#赋值解构-Assignment-Destructuring" class="headerlink" title="赋值解构 Assignment Destructuring"></a>赋值解构 Assignment Destructuring</h2><p>从 对象Object 通过 属性Property 获取 值Value 的语法糖 </p><h3 id="解构对象-Destructuring-Objects"><a href="#解构对象-Destructuring-Objects" class="headerlink" title="解构对象 Destructuring Objects"></a>解构对象 Destructuring Objects</h3><p>直接上代码吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> palette = &#123;</span><br><span class="line">  profile: <span class="string">'intense-red'</span>,</span><br><span class="line">  name: <span class="string">'Red'</span>,</span><br><span class="line">  color: &#123;</span><br><span class="line">    code: <span class="string">`#f00`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  luminosity: <span class="number">0.8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> profile = palette.profile</span><br><span class="line"></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> &#123; profile &#125; = palette</span><br><span class="line"><span class="keyword">var</span> &#123; profile, name &#125; = palette</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">profile</span>: id &#125; = palette</span><br><span class="line"><span class="comment">// profile 并不能打印出来，因为并没有创建 profile 的实例</span></span><br><span class="line"><span class="comment">// console.log(profile) 会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(id)</span><br><span class="line"><span class="comment">// 结合最开始的“属性-值缩写”，比较好理解，其实这两个是等价的：</span></span><br><span class="line"><span class="keyword">var</span> &#123; profile &#125; = palette</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">profile</span>: profile &#125; = palette</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">color</span>: &#123; <span class="attr">code</span>: colorCode &#125; &#125; = palette</span><br><span class="line"><span class="comment">// 同理， color，code 是不存在的</span></span><br><span class="line"><span class="comment">// console.log(color); console.log(code) 会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(colorCode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 骚操作</span></span><br><span class="line"><span class="keyword">var</span> &#123; description = <span class="string">'This is a color palette'</span> &#125; = palette</span><br><span class="line"><span class="built_in">console</span>.log(description)</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">color</span>: &#123; density = <span class="number">320</span> &#125; &#125; = palette</span><br><span class="line"><span class="built_in">console</span>.log(density)</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">color</span>: paletteColor = &#123; <span class="attr">density</span>: <span class="number">320</span> &#125; &#125; = palette</span><br><span class="line"><span class="keyword">var</span> &#123; [<span class="string">'pro'</span> + <span class="string">'file'</span>]: paletteProfile &#125; = palette</span><br><span class="line"><span class="built_in">console</span>.log(paletteProfile)</span><br></pre></td></tr></table></figure><h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 直接上复杂点的语法吧，带默认值</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">'James'</span>, <span class="string">'L.'</span>]</span><br><span class="line"><span class="keyword">var</span> [ firstName = <span class="string">'John'</span>, , lastName = <span class="string">'Doe'</span> ] = names</span><br><span class="line"><span class="built_in">console</span>.log(lastName)</span><br><span class="line"><span class="comment">// &lt;- 'Doe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不定义中间变量，实现两个变量交换</span></span><br><span class="line"><span class="comment">// python 的 a, b = b, a</span></span><br><span class="line">[left, right] = [right, left]</span><br></pre></td></tr></table></figure><h2 id="函数默认参数-Function-Parameter-Defaults"><a href="#函数默认参数-Function-Parameter-Defaults" class="headerlink" title="函数默认参数 Function Parameter Defaults"></a>函数默认参数 Function Parameter Defaults</h2><p>好像没什么神奇的，支持大多数上面提到的新特性，快速刷过吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">powerOf</span>(<span class="params">base, exponent = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, exponent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> double = <span class="function">(<span class="params">input = <span class="number">0</span></span>) =&gt;</span> input * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">carFactory</span>(<span class="params">&#123; brand = <span class="string">'Volkswagen'</span>, make = <span class="number">1999</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(brand)</span><br><span class="line">  <span class="built_in">console</span>.log(make)</span><br><span class="line">&#125;</span><br><span class="line">carFactory(&#123; <span class="attr">make</span>: <span class="number">2000</span> &#125;)</span><br><span class="line"><span class="comment">// &lt;- 'Volkswagen'</span></span><br><span class="line"><span class="comment">// &lt;- 2000</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里调用 carFactory() 会报错，因为没有给“&#123; brand = 'Volkswagen', make = 1999 &#125;”参数提供默认值，下面的优化是可以的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">carFactory</span>(<span class="params">&#123; brand = <span class="string">'Volkswagen'</span>, make = <span class="number">1999</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(brand)</span><br><span class="line">  <span class="built_in">console</span>.log(make)</span><br><span class="line">&#125;</span><br><span class="line">carFactory()</span><br><span class="line"><span class="comment">// &lt;- 'Volkswagen'</span></span><br><span class="line"><span class="comment">// &lt;- 1999</span></span><br></pre></td></tr></table></figure><h2 id="剩余参数和展开操作符-Rest-Parameter-and-Spread-Operator"><a href="#剩余参数和展开操作符-Rest-Parameter-and-Spread-Operator" class="headerlink" title="剩余参数和展开操作符 Rest Parameter and Spread Operator"></a>剩余参数和展开操作符 Rest Parameter and Spread Operator</h2><h3 id="剩余参数-Rest-Parameter"><a href="#剩余参数-Rest-Parameter" class="headerlink" title="剩余参数 Rest Parameter"></a>剩余参数 Rest Parameter</h3><p>好像没什么神奇的，就是把前面固定位置的参数排除后，剩下的参数都塞进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params">...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.join(<span class="string">', '</span>)</span><br><span class="line">&#125;</span><br><span class="line">join(<span class="string">'first'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>)</span><br><span class="line"><span class="comment">// &lt;- 'first, second, third'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本身函数也会有 arguements 来存放所有的参数，看起来是把超出函数定义参数长度的传参放到后面的剩余参数里面去了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">123</span>, <span class="number">456</span>)</span><br></pre></td></tr></table></figure><h3 id="展开操作符-Spread-Operator"><a href="#展开操作符-Spread-Operator" class="headerlink" title="展开操作符 Spread Operator"></a>展开操作符 Spread Operator</h3><p>把可迭代对象（iterable object）转成数组（比如字符串、数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接 Concatenation</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个列表</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">list.push.apply(list, items)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">list.push(...items)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">a = list[<span class="number">0</span>], other = list.slice(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[a, ...other] = list</span><br><span class="line"></span><br><span class="line"><span class="comment">// new and apply</span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">new</span> (<span class="built_in">Date</span>.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>,<span class="number">2017</span>,<span class="number">11</span>,<span class="number">31</span>]))</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2017</span>,<span class="number">11</span>,<span class="number">31</span>])</span><br></pre></td></tr></table></figure><h2 id="模板常量-Template-Literals"><a href="#模板常量-Template-Literals" class="headerlink" title="模板常量 Template Literals"></a>模板常量 Template Literals</h2><p>就是不加转义保留原格式的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">`I'm "amazed" at these opportunities!`</span></span><br><span class="line"><span class="keyword">var</span> multiline =</span><br><span class="line"><span class="string">`The first line</span></span><br><span class="line"><span class="string">A second line</span></span><br><span class="line"><span class="string">Then a third line`</span></span><br></pre></td></tr></table></figure><h3 id="字符串插值-String-Interpolation"><a href="#字符串插值-String-Interpolation" class="headerlink" title="字符串插值 String Interpolation"></a>字符串插值 String Interpolation</h3><p>超赞的语法，建议每种语言都有（很多的确已经支持了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`The result of 2+3 equals <span class="subst">$&#123; <span class="number">2</span> + <span class="number">3</span> &#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不过谁要是真的显式嵌套使用就感觉很睿智了</span></span><br><span class="line"><span class="string">`This template literal <span class="subst">$&#123; <span class="string">`is <span class="subst">$&#123; <span class="string">'nested'</span> &#125;</span>`</span> &#125;</span>!`</span></span><br></pre></td></tr></table></figure><h3 id="被标记的模板-Tagged-Templates"><a href="#被标记的模板-Tagged-Templates" class="headerlink" title="被标记的模板 Tagged Templates"></a>被标记的模板 Tagged Templates</h3><figure class="highlight plain"><figcaption><span>``` 会被转义，``` String.raw ``` 用来标记模板</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">String.raw&#96;&quot;\n&quot; is taken literally.</span><br><span class="line">It&#39;ll be escaped instead of interpreted.&#96;</span><br></pre></td></tr></table></figure><h3 id="自定义插值-Custom-Interpolation"><a href="#自定义插值-Custom-Interpolation" class="headerlink" title="自定义插值 Custom Interpolation"></a>自定义插值 Custom Interpolation</h3><p>单独抽一部分，上一部分 <code>String.raw`xxx`</code> 的语法其实是一种函数调用的语法糖</p><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下两两是等价的</span><br><span class="line">get&#96;http:&#x2F;&#x2F;example.com&#x2F;foo?bar&#x3D;$&#123;bar + baz&#125;&amp;quux&#x3D;$&#123;quux&#125;&#96;</span><br><span class="line">get([ &quot;http:&#x2F;&#x2F;example.com&#x2F;foo?bar&#x3D;&quot;, &quot;&amp;quux&#x3D;&quot;, &quot;&quot; ],bar + baz, quux);</span><br><span class="line"></span><br><span class="line">tag&#96;Hello, $&#123; name &#125;. I am $&#123; emotion &#125; to meet you!&#96;</span><br><span class="line">tag(</span><br><span class="line">  [&#39;Hello, &#39;, &#39;. I am &#39;, &#39; to meet you!&#39;],</span><br><span class="line">  &#39;Maurice&#39;,</span><br><span class="line">  &#39;thrilled&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Demo</span><br><span class="line">function tag(parts, ...values) &#123;</span><br><span class="line">  return parts.reduce(</span><br><span class="line">    (all, part, index) &#x3D;&gt; all + values[index - 1] + part</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Maurice&#39;</span><br><span class="line">var emotion &#x3D; &#39;thrilled&#39;</span><br><span class="line">var text &#x3D; tag&#96;Hello, $&#123; name &#125;. I am $&#123; emotion &#125; to meet you!&#96;</span><br><span class="line">console.log(text)</span><br><span class="line">&#x2F;&#x2F; &lt;- &#39;Hello, Maurice. I am thrilled to meet you!&#39;</span><br></pre></td></tr></table></figure><h2 id="let-和-const-声明-let-and-const-Statements"><a href="#let-和-const-声明-let-and-const-Statements" class="headerlink" title="let 和 const 声明 let and const Statements"></a>let 和 const 声明 let and const Statements</h2><figure class="highlight plain"><figcaption><span>``` 和 ``` var ``` 很像，但是作用域规则不同（一个是 ``` 提升的作用域（Hoisting Scoping） ```，一个是 ``` 块作用域（Block Scoping） ```）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">简单说， &#96;&#96;&#96; var &#96;&#96;&#96; 像 python，某一个内部作用域内定义（比如循环），后面全文都可以直接引用，&#96;&#96;&#96; let &#96;&#96;&#96; 像 Java，内部作用域可以使用外部作用域的变量，但是反之不能</span><br><span class="line">或者说，&#96;&#96;&#96; var &#96;&#96;&#96; 定义了全局的变量，&#96;&#96;&#96; let &#96;&#96;&#96; 单纯定义了局部的变量</span><br><span class="line">&#96;&#96;&#96; const &#96;&#96;&#96; 和 &#96;&#96;&#96; let &#96;&#96;&#96; 都是 &#96;&#96;&#96; 块作用域（Block Scoping）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">// 这里可以打印出来 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j);<span class="comment">// 这里会报错</span></span><br></pre></td></tr></table></figure><p><strong>从编码角度来说，明确每个变量的作用域是一件很有必要的事，而且内部作用域的变量不要影响到外部作用域，所以推荐使用 let 代替 var</strong><br><strong><em>对就是在说 Python 的作用域规则不优雅hhh</em></strong></p><p>尽量使用 <code>let</code> 和 <code>const</code> 来替换 <code>var</code>，可变对象用 <code>let</code>，不可变用 <code>const</code></p><p>另外关于静态变量声明 <code>const</code> 的可变和不可变可以自行查询</p><h3 id="暂死区-Temporal-Dead-Zone"><a href="#暂死区-Temporal-Dead-Zone" class="headerlink" title="暂死区 Temporal Dead Zone"></a>暂死区 Temporal Dead Zone</h3><p>就是短暂的死区</p><p>没什么用，只是概念性地解释一下：进入某一个作用域，直到变量名被 let 定义之前，任何访问（access）该变量的操作都会报错，这中间被称为 暂死区（Temporal Dead Zone）</p><p><strong><em>为什么说没什么用，变量定义前就访问当然会报错啊…</em></strong>，不过有些语言是先把所有的变量都注册到全局，然后任意时候访问都是可以的</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6, js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-v0.1 Source Code Note</title>
      <link href="/2019/03/29/flask-v1.0-source-code-note/"/>
      <url>/2019/03/29/flask-v1.0-source-code-note/</url>
      
        <content type="html"><![CDATA[<p>在阅读之前明确三个问题：</p><ol><li>flask 是什么？</li><li>flask 需要有什么？</li><li>为什么要读 v0.1 版本</li></ol><p><strong><em>暂时不讨论有关  template 渲染相关的问题</em></strong></p><p>明确了第一个问题之后第二个其实也就有答案了（可能还没有，这就是为什么需要单独问第二个问题的原因）</p><blockquote><p>A microframework based on Werkzeug.  It’s extensively documented<br>    and follows best practice patterns.</p></blockquote><p>flask 是一个基于 <code>Werkzeug</code> 的微框架，那么问题来了，Werkzeug 是什么？Werkzeug 是一个 <code>WSGI</code> 工具包，所以 WSGI 是什么？WSGI（Python Web Server Gateway Interface）是 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口，是一套规范（详情 <a href="https://www.python.org/dev/peps/pep-3333/">PEP3333</a>），所以 Werkzeug 是 WSGI 的实现，也就是说 Werkzeug 是可以直接运行的？是的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@Request.application</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">'Hello World!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">4000</span>, application)</span><br></pre></td></tr></table></figure><p>所以为什么还需要 flask？（因为没有最懒只有更懒</p><p>理解了第一个问题，第二个问题就很明白了：flask 存在于用户层和 GI（Gateway Interface） 层之间，方面用户层编写可读性高的、结构简单（等等特性）的代码，但是 flask 又必须包含服务端框架的基础功能，是一个承上启下的作用。所以 flask 需要具备的功能有：</p><ul><li>用户端：定义接口，初始化运行时的配置，定义异常处理</li><li>服务器端：可以被服务器加载到运行环境中启动，匹配接口并执行相关的处理逻辑，返回结果给请求的客户端</li><li>额外的：<ul><li>flask 提供了 pre_request 和 after_request 用于对请求进行预处理和后处理</li><li>flask 提供了方便的扩展，用户可以完全自定义服务器收到一个请求到准备好返回值这整个之间的所有过程</li></ul></li></ul><p>最后一个问题：v0.1 版本首先包含了框架的所有基础功能，而且又不包含太多额外的不需要的功能，方便直接理解要解决的问题的核心。</p><p>下面分成 <code>用户端</code>，<code>服务端</code> 和 <code>其他</code> 来分别说明相关内容</p><h2 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h2><h3 id="定义接口-异常处理"><a href="#定义接口-异常处理" class="headerlink" title="定义接口/异常处理"></a>定义接口/异常处理</h3><p>Flask 类中的 <code>route</code> 函数（装饰器）是 flask 定义接口的主要方式，类似的 <code>errorhandler</code> 用于定义异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This page does not exist'</span>, <span class="number">404</span></span><br></pre></td></tr></table></figure><h3 id="初始化运行时的配置"><a href="#初始化运行时的配置" class="headerlink" title="初始化运行时的配置"></a>初始化运行时的配置</h3><p>flask 主要通过 <code>run</code> 来接收运行时的配置，其实只是把参数传递给 <code>werkzeug</code> 的 <code>run_simple</code>，不过中间截取了 <code>&#39;debug&#39;</code> 这个参数，并填入了 <code>&#39;use_reloader&#39;</code> 和 <code>&#39;use_debugger&#39;</code> 参数（相当于做了一步中间处理）</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="加载到服务器运行环境"><a href="#加载到服务器运行环境" class="headerlink" title="加载到服务器运行环境"></a>加载到服务器运行环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, host=<span class="string">'localhost'</span>, port=<span class="number">5000</span>, **options)</span>:</span></span><br><span class="line">    <span class="comment"># 省略中间代码</span></span><br><span class="line">    <span class="keyword">return</span> run_simple(host, port, self, **options)</span><br></pre></td></tr></table></figure><p>通过最开始的例子可以看出，<code>werkzeug</code> 的 <code>run_simple</code> 的第三个参数就是服务器在收到客户端请求的时候会执行的函数，这里用了 Python 魔术方法里面的 <code>__call__</code> 方法，让类对象具有可调用的属性，具体来说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask()</span><br><span class="line">app()  <span class="comment"># 像调用函数一样调用类对象</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>``` 方法中直接调用 ``` wsgi_app ``` 函数，那为什么不直接把 ``` self.wsgi_app ``` 作为 ``` run_simple ``` 的参数传进去？在 ``` wsgi_app ``` 的注释中很明确地写出了原因：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; The actual WSGI application.  This is not implemented in &#96;__call__&#96; so that middlewares can be applied:</span><br><span class="line">&gt;</span><br><span class="line">&gt;    app.wsgi_app &#x3D; MyMiddleware(app.wsgi_app)</span><br><span class="line"></span><br><span class="line">方面用户对 wsgi_app 进行定制化修改（原文：这个函数没有直接定义在 &#96;&#96;&#96; __call__ &#96;&#96;&#96; 中是为了可以应用中间件）</span><br><span class="line"></span><br><span class="line">插一句：Flask 的注释写得确实很清晰明白，经常给出让用户容易理解和尝试的用例和场景</span><br><span class="line"></span><br><span class="line">### 匹配接口并执行相关的处理逻辑&#x2F;返回结果给请求的客户端</span><br><span class="line"></span><br><span class="line">接刚才的 &#96;&#96;&#96; wsgi_app &#96;&#96;&#96; 函数，直接把代码贴出来，因为写得很简洁明了，稍微复杂点的逻辑都抽象成了函数（以后有人问逻辑抽象成函数要抽象到什么程度，就可以把这段代码拿出去）</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">def wsgi_app(self, environ, start_response):</span><br><span class="line">    &quot;&quot;&quot;The actual WSGI application.  This is not implemented in</span><br><span class="line">    &#96;__call__&#96; so that middlewares can be applied:</span><br><span class="line"></span><br><span class="line">        app.wsgi_app &#x3D; MyMiddleware(app.wsgi_app)</span><br><span class="line"></span><br><span class="line">    :param environ: a WSGI environment</span><br><span class="line">    :param start_response: a callable accepting a status code,</span><br><span class="line">                           a list of headers and an optional</span><br><span class="line">                           exception context to start the response</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with self.request_context(environ):</span><br><span class="line">        rv &#x3D; self.preprocess_request()</span><br><span class="line">        if rv is None:</span><br><span class="line">            rv &#x3D; self.dispatch_request()</span><br><span class="line">        response &#x3D; self.make_response(rv)</span><br><span class="line">        response &#x3D; self.process_response(response)</span><br><span class="line">        return response(environ, start_response)</span><br></pre></td></tr></table></figure><p>按行快速读一遍就很爽：</p><ol><li>加载上下文</li><li>预处理</li><li>如果预处理没有返回值</li><li>分发请求给相关逻辑</li><li>准备回复</li><li>后处理</li><li>回复</li></ol><p>之前定义的接口在 <code>dispatch_request</code> 中执行，预处理和后处理方法分别在 <code>preprocess_request</code> 和 <code>process_response</code> 中执行，把整个框架的执行逻辑都集中到了这里，并对外提供扩展的可能</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="预处理和后处理"><a href="#预处理和后处理" class="headerlink" title="预处理和后处理"></a>预处理和后处理</h3><figure class="highlight plain"><figcaption><span>``` 和 ``` after_request ``` 两个函数，通过装饰器写法把需要预处理和后处理的方法放到 list 中，后续从 list 从取出函数执行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### _request_ctx_stack</span><br><span class="line"></span><br><span class="line">flask.py 最下面可以看到如下的几行代码</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line"># context locals</span><br><span class="line">_request_ctx_stack &#x3D; LocalStack()</span><br><span class="line">current_app &#x3D; LocalProxy(lambda: _request_ctx_stack.top.app)</span><br><span class="line">request &#x3D; LocalProxy(lambda: _request_ctx_stack.top.request)</span><br><span class="line">session &#x3D; LocalProxy(lambda: _request_ctx_stack.top.session)</span><br><span class="line">g &#x3D; LocalProxy(lambda: _request_ctx_stack.top.g)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>``` 是 ``` werkzeug ``` 定义的数据结构，抛开细节不看，总归是个 stack。这里主要说一下 ``` _request_ctx_stack ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在上文 &#96;&#96;&#96; wsgi_app &#96;&#96;&#96; 函数最开始，&#96;&#96;&#96; request_context &#96;&#96;&#96; 函数会创建一个 &#96;&#96;&#96; _RequestContext &#96;&#96;&#96;，并在 &#96;&#96;&#96; __enter__ &#96;&#96;&#96; 方法中把实例本身压栈到了 &#96;&#96;&#96; _request_ctx_stack &#96;&#96;&#96; 中，在 &#96;&#96;&#96; __exit__ &#96;&#96;&#96; 的时候出栈</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">class _RequestContext(object):</span><br><span class="line"># 省略初始化等中间代码</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        _request_ctx_stack.push(self)</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_value, tb):</span><br><span class="line">        if tb is None or not self.app.debug:</span><br><span class="line">            _request_ctx_stack.pop()</span><br></pre></td></tr></table></figure><p>所以上文的几个全局变量 <code>current_app</code>、<code>request</code>、<code>session</code>、<code>g</code> 其实是栈顶 <code>_RequestContext</code> 实例的属性，也就是当前请求的环境变量，这就是 flask 如何维护上下文的</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/flask_flow_thumb.jpg" alt="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/flask_flow.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask, soruce-code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wtfpython Note - CN</title>
      <link href="/2019/03/29/wtfpython-cn/"/>
      <url>/2019/03/29/wtfpython-cn/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-wtfpython-cn-Github"><a href="#Github-wtfpython-cn-Github" class="headerlink" title="Github: wtfpython-cn - Github"></a>Github: <a href="https://github.com/leisurelicht/wtfpython-cn">wtfpython-cn - Github</a></h1><p><strong>一些有趣且鲜为人知的 Python 特性.</strong></p><p><a href="https://github.com/satwikkansal/wtfpython">wtfpython - 原文</a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>字符串驻留（string interning） </li><li>字典使用哈希值来检测检查键值是否相等</li><li>生成器执行的滞后性</li><li>可变对象的相同引用（reference）</li><li>不明确的操作符执行优先级</li><li><code>+</code> 和 <code>+=</code> 的区别</li><li><code>except</code> 语句的语法</li><li><code>True</code> and <code>False</code> 在老 Python2 中的鬼操作 :P</li><li>变量作用域</li></ul><h2 id="如何避免陷阱"><a href="#如何避免陷阱" class="headerlink" title="如何避免陷阱"></a>如何避免陷阱</h2><ul><li><strong>永远不要</strong> 用 <code>is</code> 比较值相等</li><li>最好只使用一种类型作为容器的内容，虽然 Pytthon 支持给容器赋值多类型</li><li>生成器表达式会在执行的时候才去计算和产生值，所以在完全迭代完成之前不要改变源迭代器的值，或者在之前拷贝一份</li><li>明确是否要将一个可变对象赋值给另一个变量，每次都考虑一下是否有必要做一份拷贝</li><li>用括号来明确表达式意义，不要依靠操作符的优先级，尤其是在进行真值比较的时候（True or False）</li><li>明确是否要在原地修改一个可变对象，然后再选择使用 <code>+</code> 还是 <code>+=</code></li><li><strong>永远不要</strong> 在迭代一个可迭代对象的时候修改它</li><li>一定搞懂 Python 作用域的查询原则：<code>LEGB</code></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="Python-神奇的字典"><a href="#Python-神奇的字典" class="headerlink" title="Python 神奇的字典"></a>Python 神奇的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">some_dict = &#123; <span class="string">'s'</span> : <span class="number">42</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span><span class="params">(str)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          type(self) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> type(other) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> super().__eq__(other)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 当我们自定义 __eq__ 方法时, Python 不会再自动继承 __hash__ 方法</span></span><br><span class="line">  <span class="comment"># 所以我们也需要定义它</span></span><br><span class="line">  __hash__ = str.__hash__</span><br><span class="line"></span><br><span class="line">s = SomeClass(<span class="string">'s'</span>)</span><br><span class="line">some_dict[s] = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">print(some_dict)  <span class="comment"># &#123;'s': 40, 's': 42&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Python-作用域：-LEGB"><a href="#Python-作用域：-LEGB" class="headerlink" title="Python 作用域： LEGB"></a>Python 作用域： LEGB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funcs = []</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br><span class="line">    results.append(some_func())  <span class="comment"># note the function call here</span></span><br><span class="line"></span><br><span class="line">funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line">print(results)  <span class="comment"># [0, 1, 2, 3, 4, 5, 6]</span></span><br><span class="line">print(funcs_results)  <span class="comment"># [6, 6, 6, 6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funcs = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">(x=x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br><span class="line">funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line">print(funcs_results)  <span class="comment"># [0, 1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powers_of_x = [<span class="keyword">lambda</span> x: x**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print([f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers_of_x])  <span class="comment"># [512, 512, 512, 512, 512, 512, 512, 512, 512, 512]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powers_of_x = [<span class="keyword">lambda</span> x, i=i: x**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print([f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers_of_x])  <span class="comment"># [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_func</span><span class="params">()</span>:</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">print(some_func())</span><br><span class="line">print(another_func())</span><br></pre></td></tr></table></figure><h3 id="Python-迭代器陷阱"><a href="#Python-迭代器陷阱" class="headerlink" title="Python 迭代器陷阱"></a>Python 迭代器陷阱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_1):</span><br><span class="line">    <span class="keyword">del</span> item</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_2):</span><br><span class="line">    list_2.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_3[:]):</span><br><span class="line">    list_3.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_4):</span><br><span class="line">    list_4.pop(idx)</span><br><span class="line"></span><br><span class="line">print(list_1)  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">print(list_2)  <span class="comment"># [2, 4]</span></span><br><span class="line">print(list_3)  <span class="comment"># []</span></span><br><span class="line">print(list_4)  <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wtfpython Note</title>
      <link href="/2019/03/29/wtfpython/"/>
      <url>/2019/03/29/wtfpython/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-wtfpython-Github"><a href="#Github-wtfpython-Github" class="headerlink" title="Github: wtfpython - Github"></a>Github: <a href="https://github.com/satwikkansal/wtfpython">wtfpython - Github</a></h1><p><strong>An interesting collection of surprising snippets and lesser-known Python features.</strong></p><h2 id="Key-points"><a href="#Key-points" class="headerlink" title="Key points"></a>Key points</h2><ul><li>string interning: </li><li>dict key compare hash of values</li><li>hysteresis of generator evaluating values</li><li>the same reference of mutable values</li><li>unclearness of operator priorities</li><li>difference with <code>+</code> and <code>+=</code></li><li><code>except</code> expression grammer</li><li><code>True</code> and <code>False</code> tricks with old Python2 blabla… :P</li><li>variable scope</li></ul><h2 id="How-to-avoiding-traps"><a href="#How-to-avoiding-traps" class="headerlink" title="How to avoiding traps"></a>How to avoiding traps</h2><ul><li><strong>NEVER</strong> compare string and int equality with <code>is</code></li><li>You’d better provide one type of values into a dict.keys or a set or a list or a tuple although Python support multi type into a container</li><li>Generator expression would produce values later, so don’t change the source before totally iteration or make a copy of it</li><li>Be clear when assign a mutable value to a variable, always consider if a copy is neccesary</li><li>Use to parentheses explicit ambiguous expression, for sake of human reading, especially when truthness judgement</li><li>Be clear if you want the mutable object be modified in-place before choosing <code>+</code> and <code>+=</code></li><li><strong>NEVER</strong> modify a iterale value while iterating it</li><li>Be sure to master Python variable scope: <code>LEGB</code></li></ul><h2 id="Interview-Cases"><a href="#Interview-Cases" class="headerlink" title="Interview Cases"></a>Interview Cases</h2><h3 id="Python-Marvelous-dict"><a href="#Python-Marvelous-dict" class="headerlink" title="Python Marvelous dict"></a>Python Marvelous dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">some_dict = &#123; <span class="string">'s'</span> : <span class="number">42</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span><span class="params">(str)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          type(self) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> type(other) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> super().__eq__(other)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># When we define a custom __eq__, Python stops automatically inheriting the</span></span><br><span class="line">  <span class="comment"># __hash__ method, so we need to define it as well</span></span><br><span class="line">  __hash__ = str.__hash__</span><br><span class="line"></span><br><span class="line">s = SomeClass(<span class="string">'s'</span>)</span><br><span class="line">some_dict[s] = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">print(some_dict)  <span class="comment"># &#123;'s': 40, 's': 42&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Python-scope-EGB"><a href="#Python-scope-EGB" class="headerlink" title="Python scope: EGB"></a>Python scope: EGB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funcs = []</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br><span class="line">    results.append(some_func())  <span class="comment"># note the function call here</span></span><br><span class="line"></span><br><span class="line">funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line">print(results)  <span class="comment"># [0, 1, 2, 3, 4, 5, 6]</span></span><br><span class="line">print(funcs_results)  <span class="comment"># [6, 6, 6, 6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funcs = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">(x=x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br><span class="line">funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line">print(funcs_results)  <span class="comment"># [0, 1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powers_of_x = [<span class="keyword">lambda</span> x: x**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print([f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers_of_x])  <span class="comment"># [512, 512, 512, 512, 512, 512, 512, 512, 512, 512]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powers_of_x = [<span class="keyword">lambda</span> x, i=i: x**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print([f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers_of_x])  <span class="comment"># [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_func</span><span class="params">()</span>:</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">print(some_func())</span><br><span class="line">print(another_func())</span><br></pre></td></tr></table></figure><h3 id="Python-iteration-trap"><a href="#Python-iteration-trap" class="headerlink" title="Python iteration trap"></a>Python iteration trap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_1):</span><br><span class="line">    <span class="keyword">del</span> item</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_2):</span><br><span class="line">    list_2.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_3[:]):</span><br><span class="line">    list_3.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(list_4):</span><br><span class="line">    list_4.pop(idx)</span><br><span class="line"></span><br><span class="line">print(list_1)  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">print(list_2)  <span class="comment"># [2, 4]</span></span><br><span class="line">print(list_3)  <span class="comment"># []</span></span><br><span class="line">print(list_4)  <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Note Collection</title>
      <link href="/2018/08/28/note-collection/"/>
      <url>/2018/08/28/note-collection/</url>
      
        <content type="html"><![CDATA[<p><strong><em>Note Collection: Including Azure, NGINX, yun, Vim, RegEx, Domain, SSL, Gitlab, Markdown, Redis, MySQL</em></strong></p><h3 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a>Azure</h3><ol><li>目前在用 centos7.5</li><li>2 cores/4G/60G HDD: 70$/Month, Tencent Cloud / Ali Cloud -&gt; 220￥/Month</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zclaiqcc@zclaiqccAzure ~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure><h3 id="NGINX"><a href="#NGINX" class="headerlink" title="NGINX"></a>NGINX</h3><ul><li><a href="http://nginx.org/en">http://nginx.org/en</a></li><li><a href="https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx">(13: Permission denied) while connecting to upstream:[nginx]</a></li><li><a href="https://cloud.tencent.com/document/product/400/4143">HTTPS - SSL on NGINX 证书部署</a>[^2]</li><li><a href="http://nginx.org/en/docs/http/request_processing.html">How nginx processes a request</a></li><li>server name is matched by <code>exact name</code>, <code>wildcard names(start wildcard is ahead of end wildcard)</code>, <code>regular expressions</code></li><li><code>_</code> is a catch-all server name, so as <code>--</code>, <code>!@#</code> and so on invalid server name</li><li><code>&quot;&quot;</code> match the request without “Host” header field</li><li>location is mathced from up to bottom and always endwith <code>\</code></li><li>NGINX supported <code>load balancing</code> methods<ul><li>round-robin: divided by time</li><li>least-connected: all server will be maintained in a low utilization</li><li>ip-hash: a specific ip will always redirected to the same server</li></ul></li><li><a href="http://nginx.org/en/docs/http/load_balancing.html">load balancer</a></li><li>In NGINX, weights are managed independently by each worker process. </li><li>NGINX Plus uses a shared memory segment for upstream data, so weights are shared between workers and traffic is distributed more accurately.</li><li>In NGINX, <code>max_fails</code> and <code>fail_timeout</code> control the behavior of <code>health check</code> and <code>failure detaction</code></li><li>NGINX Plus uses a set of out-of-band(outer detection) <code>health checks</code>, and a <code>slow-start</code> mechanism bring server back</li><li><a href="https://docs.nginx.com/nginx/admin-guide/">Admin Guide – NGINX</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s [signal]</span><br></pre></td></tr></table></figure><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li>Yellow dog Updater, Modified</li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/rh_yum_cheatsheet_1214_jcs_print-1.pdf">yum_cheatsheet</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade</span><br><span class="line">yum groupinstall <span class="string">"Development Tools"</span></span><br></pre></td></tr></table></figure><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>Vi IMproved</li><li><a href="https://www.vim.org/">https://www.vim.org/</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/byte-of-vim.pdf">byte-of-vim.pdf</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/vim-1.0.pdf">vim-1.0.pdf</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/vimbook-OPL.pdf">vimbook-OPL.pdf</a></li><li>vimtutor cn</li><li><code>CTRL + ]</code>: jump &lt;===&gt; <code>CTRL + t</code> / <code>CTRL + r</code></li><li><code>0</code> / <code>^</code>: <code>HOME</code></li><li><code>$</code>: <code>END</code></li><li><code>w</code> / <code>W</code>: move by word &lt;===&gt; <code>b</code> / <code>B</code> &lt;===&gt; <code>e</code> / <code>E</code></li><li><code>[{</code>: to <code>\{</code> &lt;===&gt; <code>}]</code></li><li><code>*</code>: search the word under cursor &lt;===&gt; <code>#</code></li><li><code>gd</code> / <code>gD</code>: goto declaration</li><li><code>a</code>: append &lt;===&gt; <code>i</code> </li><li><code>d2w</code>: delete 2 words</li><li><code>d$</code>: delete to the end of line</li><li><code>u</code> / <code>U</code>: undo / undo a line &lt;===&gt; <code>CTRL + r</code></li><li><code>p</code>: put / paste</li><li><code>rx</code>: replace with x</li><li><code>ce</code>: change until the end of a word, similar like <code>d</code>, but into <code>INSERT</code> mode auto</li><li><code>%</code>: jump to parentheses</li><li><code>:%s/old/new/gc</code>: replace with confirmation</li><li><code>v</code>: VISUAL mode</li><li><code>!</code>: execute command</li><li><code>r</code>: retrive and put</li><li><code>R</code>: REPLACE mode</li><li><code>y</code>: yank(copy)</li><li><code>:set hls is</code>: Set the ‘hlsearch’ and ‘incsearch’ options</li><li><code>CTRL + w</code> double: jump window</li></ul><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/pattern.png" alt="pattern.png"></p><h3 id="RegEx"><a href="#RegEx" class="headerlink" title="RegEx"></a>RegEx</h3><ul><li>Regular Expression</li><li><a href="https://www.regular-expressions.info/">Regular Expression</a></li><li><a href="https://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li><li><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">正则表达式语言-MSDN</a></li><li><code>character</code>: Literal Characters, match char exactly</li><li><code>metacharacters</code>: <code>\</code>, <code>^</code> , <code>$</code> , <code>.</code> , <code>|</code> , <code>?</code> , <code>*</code> , <code>+</code> , <code>(</code> , <code>)</code> , <code>[</code> , <code>{</code> </li><li><code>[characters]</code>: Character Classes(Set), such as <code>[ae]</code> match an <code>a</code> or an <code>e</code>,  <code>[0-9a-fxA-FX]</code> matches a hexadecimal digit or the letter X</li><li><code>\b</code>: word <strong>b</strong>oundary</li><li><code>\d</code>: <strong>d</strong>igit</li><li><code>\w</code>: <strong>w</strong>ord</li><li><code>\s</code>:  a whitespace character (includes tabs and line breaks)</li><li><code>.</code>: any single character except line break</li><li><code>^</code>: start of a the string &lt;===&gt; <code>$</code></li><li><code>|</code>: alternation, such as <code>(cat|dog) food</code></li><li><code>*</code>: dup 0-x times</li><li><code>+</code>: dup 1-x times</li><li><code>{n&lt;,&lt;m&gt;&gt;}</code>: repeat n (to m) times</li></ul><h3 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h3><ul><li><a href="http://zclaiqcc.com">zclaiqcc.com</a></li></ul><p><img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E9%A1%B5.jpg" alt="腾讯云域名解析配置页.jpg"></p><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><ul><li><a href="https://about.gitlab.com/installation/#centos-7">Omnibus package installation#centos-7</a></li><li><a href="https://docs.gitlab.com/omnibus/settings/nginx.html#using-a-non-bundled-web-server">Using a non-bundled web-server</a></li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li><a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a></li><li><a href="https://www.markdownguide.org/cheat-sheet/">https://www.markdownguide.org/cheat-sheet/</a></li><li><a href="http://markdowncss.github.io/">http://markdowncss.github.io/</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/markdown-cheatsheet-online.pdf">markdown-cheatsheet-online.pdf</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/markdown-modest.css">markdown-modes.css - customized by zclaiqcc</a></li><li><a href="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/markdown-air.css">markdown-air.css - customized by zclaiqcc</a></li><li><code>~~this~~</code>: <del>this</del></li><li>Here’s a sentence with a footnote. [^1]</li><li>:+1:</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><strong>* 官方 install 文档并不怎么能看  *</strong></p><ul><li>REmote DIctionary Server</li><li><a href="https://redis.io/">https://redis.io/</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-secure-redis-centos-7">How to Install and Secure Redis on Centos7</a></li><li><a href="https://github.com/MicrosoftArchive/redis/releases">Redis on windows</a></li><li>key, value is limited by <code>512MB</code></li><li>Redis lists are implemented via <code>Linked Lists</code>.</li><li><a href="https://blog.csdn.net/caishenfans/article/details/44784131">Redis的五种对象类型及其底层实现</a></li><li><a href="http://antirez.com/news/92">About Redis Sets memory efficiency</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis</span><br><span class="line">systemctl restart redis.service</span><br><span class="line">systemctl status redis.service</span><br><span class="line">vim /etc/redis.conf</span><br><span class="line"></span><br><span class="line">redis-cli -h [hostname]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> auth password</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html">Installing MySQL on Linux Using the MySQL Yum Repository</a></li><li>mysqld: MySQL daemon</li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_database">12.14 Information Functions</a></li></ul><p>[^1]: This is the footnote.<br>[^2]: <img src="https://zclaiqcc-1257437822.cos.ap-beijing.myqcloud.com/SSLOnNginx.jpg" alt="SSLOnNginx.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> azure, nginx, yun, vim, regex, domain, ssl, gitlab, markdown, redis, mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT - the stupid content tracker</title>
      <link href="/2005/04/08/GIT%20-%20the%20stupid%20content%20tracker/"/>
      <url>/2005/04/08/GIT%20-%20the%20stupid%20content%20tracker/</url>
      
        <content type="html"><![CDATA[<p>origin: <a href="https://github.com/git/git/blob/e83c5163316f89bfbde7d9ab23ca2e25604af290/README">Initial revision of “git”, the information manager from hell</a></p><p>“git” can mean anything, depending on your mood.</p><ul><li>random three-letter combination that is pronounceable, and not<br>actually used by any common UNIX command.  The fact that it is a<br>mispronounciation of “get” may or may not be relevant.</li><li>stupid. contemptible and despicable. simple. Take your pick from the<br>dictionary of slang.</li><li>“global information tracker”: you’re in a good mood, and it actually<br>works for you. Angels sing, and a light suddenly fills the room. </li><li>“goddamn idiotic truckload of sh*t”: when it breaks</li></ul><p>This is a stupid (but extremely fast) directory content manager.  It<br>doesn’t do a whole lot, but what it <em>does</em> do is track directory<br>contents efficiently. </p><p>There are two object abstractions: the “object database”, and the<br>“current directory cache”.</p><pre><code>The Object Database (SHA1_FILE_DIRECTORY)</code></pre><p>The object database is literally just a content-addressable collection<br>of objects.  All objects are named by their content, which is<br>approximated by the SHA1 hash of the object itself.  Objects may refer<br>to other objects (by referencing their SHA1 hash), and so you can build<br>up a hierarchy of objects. </p><p>There are several kinds of objects in the content-addressable collection<br>database.  They are all in deflated with zlib, and start off with a tag<br>of their type, and size information about the data.  The SHA1 hash is<br>always the hash of the <em>compressed</em> object, not the original one.</p><p>In particular, the consistency of an object can always be tested<br>independently of the contents or the type of the object: all objects can<br>be validated by verifying that (a) their hashes match the content of the<br>file and (b) the object successfully inflates to a stream of bytes that<br>forms a sequence of <ascii tag without space> + <space> + <ascii decimalsize> + &lt;byte\0&gt; + <binary object data>. </p><p>BLOB: A “blob” object is nothing but a binary blob of data, and doesn’t<br>refer to anything else.  There is no signature or any other verification<br>of the data, so while the object is consistent (it <em>is</em> indexed by its<br>sha1 hash, so the data itself is certainly correct), it has absolutely<br>no other attributes.  No name associations, no permissions.  It is<br>purely a blob of data (ie normally “file contents”). </p><p>TREE: The next hierarchical object type is the “tree” object.  A tree<br>object is a list of permission/name/blob data, sorted by name.  In other<br>words the tree object is uniquely determined by the set contents, and so<br>two separate but identical trees will always share the exact same<br>object. </p><p>Again, a “tree” object is just a pure data abstraction: it has no<br>history, no signatures, no verification of validity, except that the<br>contents are again protected by the hash itself.  So you can trust the<br>contents of a tree, the same way you can trust the contents of a blob,<br>but you don’t know where those contents <em>came</em> from. </p><p>Side note on trees: since a “tree” object is a sorted list of<br>“filename+content”, you can create a diff between two trees without<br>actually having to unpack two trees.  Just ignore all common parts, and<br>your diff will look right.  In other words, you can effectively (and<br>efficiently) tell the difference between any two random trees by O(n)<br>where “n” is the size of the difference, rather than the size of the<br>tree. </p><p>Side note 2 on trees: since the name of a “blob” depends entirely and<br>exclusively on its contents (ie there are no names or permissions<br>involved), you can see trivial renames or permission changes by noticing<br>that the blob stayed the same.  However, renames with data changes need<br>a smarter “diff” implementation. </p><p>CHANGESET: The “changeset” object is an object that introduces the<br>notion of history into the picture.  In contrast to the other objects,<br>it doesn’t just describe the physical state of a tree, it describes how<br>we got there, and why. </p><p>A “changeset” is defined by the tree-object that it results in, the<br>parent changesets (zero, one or more) that led up to that point, and a<br>comment on what happened. Again, a changeset is not trusted per se:<br>the contents are well-defined and “safe” due to the cryptographically<br>strong signatures at all levels, but there is no reason to believe that<br>the tree is “good” or that the merge information makes sense. The<br>parents do not have to actually have any relationship with the result,<br>for example.</p><p>Note on changesets: unlike real SCM’s, changesets do not contain rename<br>information or file mode chane information.  All of that is implicit in<br>the trees involved (the result tree, and the result trees of the<br>parents), and describing that makes no sense in this idiotic file<br>manager.</p><p>TRUST: The notion of “trust” is really outside the scope of “git”, but<br>it’s worth noting a few things. First off, since everything is hashed<br>with SHA1, you <em>can</em> trust that an object is intact and has not been<br>messed with by external sources. So the name of an object uniquely<br>identifies a known state - just not a state that you may want to trust.</p><p>Furthermore, since the SHA1 signature of a changeset refers to the<br>SHA1 signatures of the tree it is associated with and the signatures<br>of the parent, a single named changeset specifies uniquely a whole<br>set of history, with full contents. You can’t later fake any step of<br>the way once you have the name of a changeset.</p><p>So to introduce some real trust in the system, the only thing you need<br>to do is to digitally sign just <em>one</em> special note, which includes the<br>name of a top-level changeset.  Your digital signature shows others that<br>you trust that changeset, and the immutability of the history of<br>changesets tells others that they can trust the whole history.</p><p>In other words, you can easily validate a whole archive by just sending<br>out a single email that tells the people the name (SHA1 hash) of the top<br>changeset, and digitally sign that email using something like GPG/PGP.</p><p>In particular, you can also have a separate archive of “trust points” or<br>tags, which document your (and other peoples) trust.  You may, of<br>course, archive these “certificates of trust” using “git” itself, but<br>it’s not something “git” does for you. </p><p>Another way of saying the same thing: “git” itself only handles content<br>integrity, the trust has to come from outside. </p><pre><code>Current Directory Cache (&quot;.dircache/index&quot;)</code></pre><p>The “current directory cache” is a simple binary file, which contains an<br>efficient representation of a virtual directory content at some random<br>time.  It does so by a simple array that associates a set of names,<br>dates, permissions and content (aka “blob”) objects together.  The cache<br>is always kept ordered by name, and names are unique at any point in<br>time, but the cache has no long-term meaning, and can be partially<br>updated at any time. </p><p>In particular, the “current directory cache” certainly does not need to<br>be consistent with the current directory contents, but it has two very<br>important attributes:</p><p> (a) it can re-generate the full state it caches (not just the directory<br>     structure: through the “blob” object it can regenerate the data too)</p><pre><code>As a special case, there is a clear and unambiguous one-way mappingfrom a current directory cache to a &quot;tree object&quot;, which can beefficiently created from just the current directory cache withoutactually looking at any other data.  So a directory cache at anyone time uniquely specifies one and only one &quot;tree&quot; object (buthas additional data to make it easy to match up that tree objectwith what has happened in the directory)</code></pre><p>and</p><p> (b) it has efficient methods for finding inconsistencies between that<br>     cached state (“tree object waiting to be instantiated”) and the<br>     current state. </p><p>Those are the two ONLY things that the directory cache does.  It’s a<br>cache, and the normal operation is to re-generate it completely from a<br>known tree object, or update/compare it with a live tree that is being<br>developed.  If you blow the directory cache away entirely, you haven’t<br>lost any information as long as you have the name of the tree that it<br>described. </p><p>(But directory caches can also have real information in them: in<br>particular, they can have the representation of an intermediate tree<br>that has not yet been instantiated.  So they do have meaning and usage<br>outside of caching - in one sense you can think of the current directory<br>cache as being the “work in progress” towards a tree commit).</p>]]></content>
      
      
      <categories>
          
          <category> resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git, Linus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
